/* 
 * Stardust API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-22T22:32:07Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Stardust.CoreSDK.Client.SwaggerDateConverter;

namespace Stardust.CoreSDK.Model
{
    /// <summary>
    /// This is the data output json model, i.e. {\&quot;uniqueId\&quot;: \&quot;playerId\&quot;} 
    /// </summary>
    [DataContract]
        public partial class SDPlayerGetIdsResponse :  IEquatable<SDPlayerGetIdsResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SDPlayerGetIdsResponse" /> class.
        /// </summary>
        /// <param name="playerId">Player ID in the form of a UUID (required).</param>
        /// <param name="uniqueId">Player ID in the form of a the game player&#x27;s internal playerId, i.e. email address, uuid (required).</param>
        public SDPlayerGetIdsResponse(string playerId = default(string), string uniqueId = default(string))
        {
            // to ensure "playerId" is required (not null)
            if (playerId == null)
            {
                throw new InvalidDataException("playerId is a required property for SDPlayerGetIdsResponse and cannot be null");
            }
            else
            {
                this.PlayerId = playerId;
            }
            // to ensure "uniqueId" is required (not null)
            if (uniqueId == null)
            {
                throw new InvalidDataException("uniqueId is a required property for SDPlayerGetIdsResponse and cannot be null");
            }
            else
            {
                this.UniqueId = uniqueId;
            }
        }
        
        /// <summary>
        /// Player ID in the form of a UUID
        /// </summary>
        /// <value>Player ID in the form of a UUID</value>
        [DataMember(Name="playerId", EmitDefaultValue=false)]
        public string PlayerId { get; set; }

        /// <summary>
        /// Player ID in the form of a the game player&#x27;s internal playerId, i.e. email address, uuid
        /// </summary>
        /// <value>Player ID in the form of a the game player&#x27;s internal playerId, i.e. email address, uuid</value>
        [DataMember(Name="uniqueId", EmitDefaultValue=false)]
        public string UniqueId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SDPlayerGetIdsResponse {\n");
            sb.Append("  PlayerId: ").Append(PlayerId).Append("\n");
            sb.Append("  UniqueId: ").Append(UniqueId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SDPlayerGetIdsResponse);
        }

        /// <summary>
        /// Returns true if SDPlayerGetIdsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SDPlayerGetIdsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SDPlayerGetIdsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PlayerId == input.PlayerId ||
                    (this.PlayerId != null &&
                    this.PlayerId.Equals(input.PlayerId))
                ) && 
                (
                    this.UniqueId == input.UniqueId ||
                    (this.UniqueId != null &&
                    this.UniqueId.Equals(input.UniqueId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PlayerId != null)
                    hashCode = hashCode * 59 + this.PlayerId.GetHashCode();
                if (this.UniqueId != null)
                    hashCode = hashCode * 59 + this.UniqueId.GetHashCode();
                return hashCode;
            }
        }
    }
}
