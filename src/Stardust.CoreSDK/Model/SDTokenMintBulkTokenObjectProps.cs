/* 
 * Stardust API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-22T22:32:07Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Stardust.CoreSDK.Client.SwaggerDateConverter;

namespace Stardust.CoreSDK.Model
{
    /// <summary>
    /// Internal metadata
    /// </summary>
    [DataContract]
        public partial class SDTokenMintBulkTokenObjectProps :  IEquatable<SDTokenMintBulkTokenObjectProps>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SDTokenMintBulkTokenObjectProps" /> class.
        /// </summary>
        /// <param name="mutable">Specifies which properties you want to add (ex. {prop1: 5, prop2: 6, prop3: 7}) (required).</param>
        /// <param name="immutable">Specifies which properties you want to add (ex. {prop1: 5, prop2: 6, prop3: 7}).</param>
        public SDTokenMintBulkTokenObjectProps(Object mutable = default(Object), Object immutable = default(Object))
        {
            // to ensure "mutable" is required (not null)
            if (mutable == null)
            {
                throw new InvalidDataException("mutable is a required property for SDTokenMintBulkTokenObjectProps and cannot be null");
            }
            else
            {
                this.Mutable = mutable;
            }
            this.Immutable = immutable;
        }
        
        /// <summary>
        /// Specifies which properties you want to add (ex. {prop1: 5, prop2: 6, prop3: 7})
        /// </summary>
        /// <value>Specifies which properties you want to add (ex. {prop1: 5, prop2: 6, prop3: 7})</value>
        [DataMember(Name="mutable", EmitDefaultValue=false)]
        public Object Mutable { get; set; }

        /// <summary>
        /// Specifies which properties you want to add (ex. {prop1: 5, prop2: 6, prop3: 7})
        /// </summary>
        /// <value>Specifies which properties you want to add (ex. {prop1: 5, prop2: 6, prop3: 7})</value>
        [DataMember(Name="immutable", EmitDefaultValue=false)]
        public Object Immutable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SDTokenMintBulkTokenObjectProps {\n");
            sb.Append("  Mutable: ").Append(Mutable).Append("\n");
            sb.Append("  Immutable: ").Append(Immutable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SDTokenMintBulkTokenObjectProps);
        }

        /// <summary>
        /// Returns true if SDTokenMintBulkTokenObjectProps instances are equal
        /// </summary>
        /// <param name="input">Instance of SDTokenMintBulkTokenObjectProps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SDTokenMintBulkTokenObjectProps input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Mutable == input.Mutable ||
                    (this.Mutable != null &&
                    this.Mutable.Equals(input.Mutable))
                ) && 
                (
                    this.Immutable == input.Immutable ||
                    (this.Immutable != null &&
                    this.Immutable.Equals(input.Immutable))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Mutable != null)
                    hashCode = hashCode * 59 + this.Mutable.GetHashCode();
                if (this.Immutable != null)
                    hashCode = hashCode * 59 + this.Immutable.GetHashCode();
                return hashCode;
            }
        }
    }
}
