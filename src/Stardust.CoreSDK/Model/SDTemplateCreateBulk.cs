/* 
 * Stardust API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-22T22:32:07Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Stardust.CoreSDK.Client.SwaggerDateConverter;

namespace Stardust.CoreSDK.Model
{
    /// <summary>
    /// SDTemplateCreateBulk
    /// </summary>
    [DataContract]
        public partial class SDTemplateCreateBulk :  IEquatable<SDTemplateCreateBulk>
    {
        /// <summary>
        /// The type of custom contract to use for this template. Default will use a shared contract.
        /// </summary>
        /// <value>The type of custom contract to use for this template. Default will use a shared contract.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ContractTypeEnum
        {
            /// <summary>
            /// Enum ERC721 for value: ERC721
            /// </summary>
            [EnumMember(Value = "ERC721")]
            ERC721 = 1        }
        /// <summary>
        /// The type of custom contract to use for this template. Default will use a shared contract.
        /// </summary>
        /// <value>The type of custom contract to use for this template. Default will use a shared contract.</value>
        [DataMember(Name="contractType", EmitDefaultValue=false)]
        public ContractTypeEnum? ContractType { get; set; }
        /// <summary>
        /// FT is a currency where every instance is the same, NFT is where every token instance differes (ex. FT)
        /// </summary>
        /// <value>FT is a currency where every instance is the same, NFT is where every token instance differes (ex. FT)</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum FT for value: FT
            /// </summary>
            [EnumMember(Value = "FT")]
            FT = 1,
            /// <summary>
            /// Enum NFT for value: NFT
            /// </summary>
            [EnumMember(Value = "NFT")]
            NFT = 2        }
        /// <summary>
        /// FT is a currency where every instance is the same, NFT is where every token instance differes (ex. FT)
        /// </summary>
        /// <value>FT is a currency where every instance is the same, NFT is where every token instance differes (ex. FT)</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SDTemplateCreateBulk" /> class.
        /// </summary>
        /// <param name="name">The name of the template (ex. Bronze Axe) (required).</param>
        /// <param name="cap">u96 Number as String (ex. 200000000), default 39614081257132168796771975168 .</param>
        /// <param name="contractType">The type of custom contract to use for this template. Default will use a shared contract..</param>
        /// <param name="type">FT is a currency where every instance is the same, NFT is where every token instance differes (ex. FT).</param>
        /// <param name="image">image url (required).</param>
        /// <param name="description">Description of template.</param>
        /// <param name="activeListing">Set if the Template is active or not.</param>
        /// <param name="ownerAddress">Blockchain address to set as owner of the custom contract, if contractType is passed in..</param>
        /// <param name="props">props.</param>
        /// <param name="publicContractMetadata">Returned to marketplaces as contract metadata.</param>
        /// <param name="publicTokenMetadata">Inherited by tokens, and returned to marketplaces as token metadata.</param>
        public SDTemplateCreateBulk(string name = default(string), string cap = default(string), ContractTypeEnum? contractType = default(ContractTypeEnum?), TypeEnum? type = default(TypeEnum?), string image = default(string), string description = default(string), bool? activeListing = default(bool?), string ownerAddress = default(string), SDTemplateCreateBulkProps props = default(SDTemplateCreateBulkProps), Object publicContractMetadata = default(Object), Object publicTokenMetadata = default(Object))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for SDTemplateCreateBulk and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "image" is required (not null)
            if (image == null)
            {
                throw new InvalidDataException("image is a required property for SDTemplateCreateBulk and cannot be null");
            }
            else
            {
                this.Image = image;
            }
            this.Cap = cap;
            this.ContractType = contractType;
            this.Type = type;
            this.Description = description;
            this.ActiveListing = activeListing;
            this.OwnerAddress = ownerAddress;
            this.Props = props;
            this.PublicContractMetadata = publicContractMetadata;
            this.PublicTokenMetadata = publicTokenMetadata;
        }
        
        /// <summary>
        /// The name of the template (ex. Bronze Axe)
        /// </summary>
        /// <value>The name of the template (ex. Bronze Axe)</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// u96 Number as String (ex. 200000000), default 39614081257132168796771975168 
        /// </summary>
        /// <value>u96 Number as String (ex. 200000000), default 39614081257132168796771975168 </value>
        [DataMember(Name="cap", EmitDefaultValue=false)]
        public string Cap { get; set; }



        /// <summary>
        /// image url
        /// </summary>
        /// <value>image url</value>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// Description of template
        /// </summary>
        /// <value>Description of template</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Set if the Template is active or not
        /// </summary>
        /// <value>Set if the Template is active or not</value>
        [DataMember(Name="activeListing", EmitDefaultValue=false)]
        public bool? ActiveListing { get; set; }

        /// <summary>
        /// Blockchain address to set as owner of the custom contract, if contractType is passed in.
        /// </summary>
        /// <value>Blockchain address to set as owner of the custom contract, if contractType is passed in.</value>
        [DataMember(Name="ownerAddress", EmitDefaultValue=false)]
        public string OwnerAddress { get; set; }

        /// <summary>
        /// Gets or Sets Props
        /// </summary>
        [DataMember(Name="props", EmitDefaultValue=false)]
        public SDTemplateCreateBulkProps Props { get; set; }

        /// <summary>
        /// Returned to marketplaces as contract metadata
        /// </summary>
        /// <value>Returned to marketplaces as contract metadata</value>
        [DataMember(Name="publicContractMetadata", EmitDefaultValue=false)]
        public Object PublicContractMetadata { get; set; }

        /// <summary>
        /// Inherited by tokens, and returned to marketplaces as token metadata
        /// </summary>
        /// <value>Inherited by tokens, and returned to marketplaces as token metadata</value>
        [DataMember(Name="publicTokenMetadata", EmitDefaultValue=false)]
        public Object PublicTokenMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SDTemplateCreateBulk {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Cap: ").Append(Cap).Append("\n");
            sb.Append("  ContractType: ").Append(ContractType).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ActiveListing: ").Append(ActiveListing).Append("\n");
            sb.Append("  OwnerAddress: ").Append(OwnerAddress).Append("\n");
            sb.Append("  Props: ").Append(Props).Append("\n");
            sb.Append("  PublicContractMetadata: ").Append(PublicContractMetadata).Append("\n");
            sb.Append("  PublicTokenMetadata: ").Append(PublicTokenMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SDTemplateCreateBulk);
        }

        /// <summary>
        /// Returns true if SDTemplateCreateBulk instances are equal
        /// </summary>
        /// <param name="input">Instance of SDTemplateCreateBulk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SDTemplateCreateBulk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Cap == input.Cap ||
                    (this.Cap != null &&
                    this.Cap.Equals(input.Cap))
                ) && 
                (
                    this.ContractType == input.ContractType ||
                    (this.ContractType != null &&
                    this.ContractType.Equals(input.ContractType))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ActiveListing == input.ActiveListing ||
                    (this.ActiveListing != null &&
                    this.ActiveListing.Equals(input.ActiveListing))
                ) && 
                (
                    this.OwnerAddress == input.OwnerAddress ||
                    (this.OwnerAddress != null &&
                    this.OwnerAddress.Equals(input.OwnerAddress))
                ) && 
                (
                    this.Props == input.Props ||
                    (this.Props != null &&
                    this.Props.Equals(input.Props))
                ) && 
                (
                    this.PublicContractMetadata == input.PublicContractMetadata ||
                    (this.PublicContractMetadata != null &&
                    this.PublicContractMetadata.Equals(input.PublicContractMetadata))
                ) && 
                (
                    this.PublicTokenMetadata == input.PublicTokenMetadata ||
                    (this.PublicTokenMetadata != null &&
                    this.PublicTokenMetadata.Equals(input.PublicTokenMetadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Cap != null)
                    hashCode = hashCode * 59 + this.Cap.GetHashCode();
                if (this.ContractType != null)
                    hashCode = hashCode * 59 + this.ContractType.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ActiveListing != null)
                    hashCode = hashCode * 59 + this.ActiveListing.GetHashCode();
                if (this.OwnerAddress != null)
                    hashCode = hashCode * 59 + this.OwnerAddress.GetHashCode();
                if (this.Props != null)
                    hashCode = hashCode * 59 + this.Props.GetHashCode();
                if (this.PublicContractMetadata != null)
                    hashCode = hashCode * 59 + this.PublicContractMetadata.GetHashCode();
                if (this.PublicTokenMetadata != null)
                    hashCode = hashCode * 59 + this.PublicTokenMetadata.GetHashCode();
                return hashCode;
            }
        }
    }
}
