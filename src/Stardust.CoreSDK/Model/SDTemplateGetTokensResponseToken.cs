/* 
 * Stardust API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-22T22:32:07Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Stardust.CoreSDK.Client.SwaggerDateConverter;

namespace Stardust.CoreSDK.Model
{
    /// <summary>
    /// SDTemplateGetTokensResponseToken
    /// </summary>
    [DataContract]
        public partial class SDTemplateGetTokensResponseToken :  IEquatable<SDTemplateGetTokensResponseToken>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SDTemplateGetTokensResponseToken" /> class.
        /// </summary>
        /// <param name="id">Token ID Number (unsigned 32 bit integer) (required).</param>
        /// <param name="amount">u64 Number as String, min: 0, max: 9223372036854775807 (ex. \&quot;6\&quot;) (required).</param>
        /// <param name="templateId">Template ID Number (unsigned 32 bit integer).</param>
        /// <param name="name">Template Name.</param>
        /// <param name="props">props.</param>
        /// <param name="publicMetadata">Returned to marketplaces as token metadata.</param>
        public SDTemplateGetTokensResponseToken(int? id = default(int?), string amount = default(string), int? templateId = default(int?), string name = default(string), SDTemplateGetTokensResponseTokenProps props = default(SDTemplateGetTokensResponseTokenProps), Object publicMetadata = default(Object))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for SDTemplateGetTokensResponseToken and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for SDTemplateGetTokensResponseToken and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            this.TemplateId = templateId;
            this.Name = name;
            this.Props = props;
            this.PublicMetadata = publicMetadata;
        }
        
        /// <summary>
        /// Token ID Number (unsigned 32 bit integer)
        /// </summary>
        /// <value>Token ID Number (unsigned 32 bit integer)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// u64 Number as String, min: 0, max: 9223372036854775807 (ex. \&quot;6\&quot;)
        /// </summary>
        /// <value>u64 Number as String, min: 0, max: 9223372036854775807 (ex. \&quot;6\&quot;)</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// Template ID Number (unsigned 32 bit integer)
        /// </summary>
        /// <value>Template ID Number (unsigned 32 bit integer)</value>
        [DataMember(Name="templateId", EmitDefaultValue=false)]
        public int? TemplateId { get; set; }

        /// <summary>
        /// Template Name
        /// </summary>
        /// <value>Template Name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Props
        /// </summary>
        [DataMember(Name="props", EmitDefaultValue=false)]
        public SDTemplateGetTokensResponseTokenProps Props { get; set; }

        /// <summary>
        /// Returned to marketplaces as token metadata
        /// </summary>
        /// <value>Returned to marketplaces as token metadata</value>
        [DataMember(Name="publicMetadata", EmitDefaultValue=false)]
        public Object PublicMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SDTemplateGetTokensResponseToken {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Props: ").Append(Props).Append("\n");
            sb.Append("  PublicMetadata: ").Append(PublicMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SDTemplateGetTokensResponseToken);
        }

        /// <summary>
        /// Returns true if SDTemplateGetTokensResponseToken instances are equal
        /// </summary>
        /// <param name="input">Instance of SDTemplateGetTokensResponseToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SDTemplateGetTokensResponseToken input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Props == input.Props ||
                    (this.Props != null &&
                    this.Props.Equals(input.Props))
                ) && 
                (
                    this.PublicMetadata == input.PublicMetadata ||
                    (this.PublicMetadata != null &&
                    this.PublicMetadata.Equals(input.PublicMetadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.TemplateId != null)
                    hashCode = hashCode * 59 + this.TemplateId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Props != null)
                    hashCode = hashCode * 59 + this.Props.GetHashCode();
                if (this.PublicMetadata != null)
                    hashCode = hashCode * 59 + this.PublicMetadata.GetHashCode();
                return hashCode;
            }
        }
    }
}
