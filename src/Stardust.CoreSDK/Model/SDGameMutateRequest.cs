/* 
 * Stardust API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-22T22:32:07Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Stardust.CoreSDK.Client.SwaggerDateConverter;

namespace Stardust.CoreSDK.Model
{
    /// <summary>
    /// SDGameMutateRequest
    /// </summary>
    [DataContract]
        public partial class SDGameMutateRequest :  IEquatable<SDGameMutateRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SDGameMutateRequest" /> class.
        /// </summary>
        /// <param name="description">The games description.</param>
        /// <param name="news">The games news.</param>
        /// <param name="props">Game properties.</param>
        /// <param name="testMode">Test mode will enable any test mode features. Currently in development..</param>
        public SDGameMutateRequest(string description = default(string), string news = default(string), Object props = default(Object), bool? testMode = default(bool?))
        {
            this.Description = description;
            this.News = news;
            this.Props = props;
            this.TestMode = testMode;
        }
        
        /// <summary>
        /// The games description
        /// </summary>
        /// <value>The games description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The games news
        /// </summary>
        /// <value>The games news</value>
        [DataMember(Name="news", EmitDefaultValue=false)]
        public string News { get; set; }

        /// <summary>
        /// Game properties
        /// </summary>
        /// <value>Game properties</value>
        [DataMember(Name="props", EmitDefaultValue=false)]
        public Object Props { get; set; }

        /// <summary>
        /// Test mode will enable any test mode features. Currently in development.
        /// </summary>
        /// <value>Test mode will enable any test mode features. Currently in development.</value>
        [DataMember(Name="testMode", EmitDefaultValue=false)]
        public bool? TestMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SDGameMutateRequest {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  News: ").Append(News).Append("\n");
            sb.Append("  Props: ").Append(Props).Append("\n");
            sb.Append("  TestMode: ").Append(TestMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SDGameMutateRequest);
        }

        /// <summary>
        /// Returns true if SDGameMutateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SDGameMutateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SDGameMutateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.News == input.News ||
                    (this.News != null &&
                    this.News.Equals(input.News))
                ) && 
                (
                    this.Props == input.Props ||
                    (this.Props != null &&
                    this.Props.Equals(input.Props))
                ) && 
                (
                    this.TestMode == input.TestMode ||
                    (this.TestMode != null &&
                    this.TestMode.Equals(input.TestMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.News != null)
                    hashCode = hashCode * 59 + this.News.GetHashCode();
                if (this.Props != null)
                    hashCode = hashCode * 59 + this.Props.GetHashCode();
                if (this.TestMode != null)
                    hashCode = hashCode * 59 + this.TestMode.GetHashCode();
                return hashCode;
            }
        }
    }
}
