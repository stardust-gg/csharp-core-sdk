/* 
 * Stardust API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-22T22:32:07Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Stardust.CoreSDK.Client.SwaggerDateConverter;

namespace Stardust.CoreSDK.Model
{
    /// <summary>
    /// SDTemplateGetAllResponse
    /// </summary>
    [DataContract]
        public partial class SDTemplateGetAllResponse :  IEquatable<SDTemplateGetAllResponse>
    {
        /// <summary>
        /// The type of custom contract bieng used for this template.
        /// </summary>
        /// <value>The type of custom contract bieng used for this template.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ContractTypeEnum
        {
            /// <summary>
            /// Enum ERC721 for value: ERC721
            /// </summary>
            [EnumMember(Value = "ERC721")]
            ERC721 = 1,
            /// <summary>
            /// Enum InternalMint for value: internal-mint
            /// </summary>
            [EnumMember(Value = "internal-mint")]
            InternalMint = 2,
            /// <summary>
            /// Enum ExternalNoMint for value: external-no-mint
            /// </summary>
            [EnumMember(Value = "external-no-mint")]
            ExternalNoMint = 3        }
        /// <summary>
        /// The type of custom contract bieng used for this template.
        /// </summary>
        /// <value>The type of custom contract bieng used for this template.</value>
        [DataMember(Name="contractType", EmitDefaultValue=false)]
        public ContractTypeEnum? ContractType { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TypeEnum
        {
            /// <summary>
            /// Enum FT for value: FT
            /// </summary>
            [EnumMember(Value = "FT")]
            FT = 1,
            /// <summary>
            /// Enum NFT for value: NFT
            /// </summary>
            [EnumMember(Value = "NFT")]
            NFT = 2        }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SDTemplateGetAllResponse" /> class.
        /// </summary>
        /// <param name="gameId">Game ID Number (unsigned 32 bit integer) (required).</param>
        /// <param name="id">id (required).</param>
        /// <param name="cap">u96 Number as String, min: 0, max: 39614081257132168796771975167 (required).</param>
        /// <param name="contractType">The type of custom contract bieng used for this template..</param>
        /// <param name="totalSupply">u96 Number as String, min: 0, max: 39614081257132168796771975167 (required).</param>
        /// <param name="name">The name of the template (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="props">props (required).</param>
        /// <param name="publicContractMetadata">Returned to marketplaces as contract metadata.</param>
        /// <param name="publicTokenMetadata">Inherited by tokens, and returned to marketplaces as token metadata.</param>
        public SDTemplateGetAllResponse(int? gameId = default(int?), int? id = default(int?), string cap = default(string), ContractTypeEnum? contractType = default(ContractTypeEnum?), string totalSupply = default(string), string name = default(string), TypeEnum type = default(TypeEnum), SDTemplateGetAllResponseProps props = default(SDTemplateGetAllResponseProps), Object publicContractMetadata = default(Object), Object publicTokenMetadata = default(Object))
        {
            // to ensure "gameId" is required (not null)
            if (gameId == null)
            {
                throw new InvalidDataException("gameId is a required property for SDTemplateGetAllResponse and cannot be null");
            }
            else
            {
                this.GameId = gameId;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for SDTemplateGetAllResponse and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "cap" is required (not null)
            if (cap == null)
            {
                throw new InvalidDataException("cap is a required property for SDTemplateGetAllResponse and cannot be null");
            }
            else
            {
                this.Cap = cap;
            }
            // to ensure "totalSupply" is required (not null)
            if (totalSupply == null)
            {
                throw new InvalidDataException("totalSupply is a required property for SDTemplateGetAllResponse and cannot be null");
            }
            else
            {
                this.TotalSupply = totalSupply;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for SDTemplateGetAllResponse and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for SDTemplateGetAllResponse and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "props" is required (not null)
            if (props == null)
            {
                throw new InvalidDataException("props is a required property for SDTemplateGetAllResponse and cannot be null");
            }
            else
            {
                this.Props = props;
            }
            this.ContractType = contractType;
            this.PublicContractMetadata = publicContractMetadata;
            this.PublicTokenMetadata = publicTokenMetadata;
        }
        
        /// <summary>
        /// Game ID Number (unsigned 32 bit integer)
        /// </summary>
        /// <value>Game ID Number (unsigned 32 bit integer)</value>
        [DataMember(Name="gameId", EmitDefaultValue=false)]
        public int? GameId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// u96 Number as String, min: 0, max: 39614081257132168796771975167
        /// </summary>
        /// <value>u96 Number as String, min: 0, max: 39614081257132168796771975167</value>
        [DataMember(Name="cap", EmitDefaultValue=false)]
        public string Cap { get; set; }


        /// <summary>
        /// u96 Number as String, min: 0, max: 39614081257132168796771975167
        /// </summary>
        /// <value>u96 Number as String, min: 0, max: 39614081257132168796771975167</value>
        [DataMember(Name="totalSupply", EmitDefaultValue=false)]
        public string TotalSupply { get; set; }

        /// <summary>
        /// The name of the template
        /// </summary>
        /// <value>The name of the template</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Gets or Sets Props
        /// </summary>
        [DataMember(Name="props", EmitDefaultValue=false)]
        public SDTemplateGetAllResponseProps Props { get; set; }

        /// <summary>
        /// Returned to marketplaces as contract metadata
        /// </summary>
        /// <value>Returned to marketplaces as contract metadata</value>
        [DataMember(Name="publicContractMetadata", EmitDefaultValue=false)]
        public Object PublicContractMetadata { get; set; }

        /// <summary>
        /// Inherited by tokens, and returned to marketplaces as token metadata
        /// </summary>
        /// <value>Inherited by tokens, and returned to marketplaces as token metadata</value>
        [DataMember(Name="publicTokenMetadata", EmitDefaultValue=false)]
        public Object PublicTokenMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SDTemplateGetAllResponse {\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Cap: ").Append(Cap).Append("\n");
            sb.Append("  ContractType: ").Append(ContractType).Append("\n");
            sb.Append("  TotalSupply: ").Append(TotalSupply).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Props: ").Append(Props).Append("\n");
            sb.Append("  PublicContractMetadata: ").Append(PublicContractMetadata).Append("\n");
            sb.Append("  PublicTokenMetadata: ").Append(PublicTokenMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SDTemplateGetAllResponse);
        }

        /// <summary>
        /// Returns true if SDTemplateGetAllResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SDTemplateGetAllResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SDTemplateGetAllResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GameId == input.GameId ||
                    (this.GameId != null &&
                    this.GameId.Equals(input.GameId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Cap == input.Cap ||
                    (this.Cap != null &&
                    this.Cap.Equals(input.Cap))
                ) && 
                (
                    this.ContractType == input.ContractType ||
                    (this.ContractType != null &&
                    this.ContractType.Equals(input.ContractType))
                ) && 
                (
                    this.TotalSupply == input.TotalSupply ||
                    (this.TotalSupply != null &&
                    this.TotalSupply.Equals(input.TotalSupply))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Props == input.Props ||
                    (this.Props != null &&
                    this.Props.Equals(input.Props))
                ) && 
                (
                    this.PublicContractMetadata == input.PublicContractMetadata ||
                    (this.PublicContractMetadata != null &&
                    this.PublicContractMetadata.Equals(input.PublicContractMetadata))
                ) && 
                (
                    this.PublicTokenMetadata == input.PublicTokenMetadata ||
                    (this.PublicTokenMetadata != null &&
                    this.PublicTokenMetadata.Equals(input.PublicTokenMetadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GameId != null)
                    hashCode = hashCode * 59 + this.GameId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Cap != null)
                    hashCode = hashCode * 59 + this.Cap.GetHashCode();
                if (this.ContractType != null)
                    hashCode = hashCode * 59 + this.ContractType.GetHashCode();
                if (this.TotalSupply != null)
                    hashCode = hashCode * 59 + this.TotalSupply.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Props != null)
                    hashCode = hashCode * 59 + this.Props.GetHashCode();
                if (this.PublicContractMetadata != null)
                    hashCode = hashCode * 59 + this.PublicContractMetadata.GetHashCode();
                if (this.PublicTokenMetadata != null)
                    hashCode = hashCode * 59 + this.PublicTokenMetadata.GetHashCode();
                return hashCode;
            }
        }
    }
}
