/* 
 * Stardust API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-22T22:32:07Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Stardust.CoreSDK.Client.SwaggerDateConverter;

namespace Stardust.CoreSDK.Model
{
    /// <summary>
    /// SDPlayerCreateJWTObject
    /// </summary>
    [DataContract]
        public partial class SDPlayerCreateJWTObject :  IEquatable<SDPlayerCreateJWTObject>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SDPlayerCreateJWTObject" /> class.
        /// </summary>
        /// <param name="type">Your provider JWT name (required).</param>
        /// <param name="idToken">idToken of the user session.</param>
        /// <param name="accessToken">Access token of the user session.</param>
        public SDPlayerCreateJWTObject(string type = default(string), string idToken = default(string), string accessToken = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for SDPlayerCreateJWTObject and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            this.IdToken = idToken;
            this.AccessToken = accessToken;
        }
        
        /// <summary>
        /// Your provider JWT name
        /// </summary>
        /// <value>Your provider JWT name</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// idToken of the user session
        /// </summary>
        /// <value>idToken of the user session</value>
        [DataMember(Name="idToken", EmitDefaultValue=false)]
        public string IdToken { get; set; }

        /// <summary>
        /// Access token of the user session
        /// </summary>
        /// <value>Access token of the user session</value>
        [DataMember(Name="accessToken", EmitDefaultValue=false)]
        public string AccessToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SDPlayerCreateJWTObject {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IdToken: ").Append(IdToken).Append("\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SDPlayerCreateJWTObject);
        }

        /// <summary>
        /// Returns true if SDPlayerCreateJWTObject instances are equal
        /// </summary>
        /// <param name="input">Instance of SDPlayerCreateJWTObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SDPlayerCreateJWTObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.IdToken == input.IdToken ||
                    (this.IdToken != null &&
                    this.IdToken.Equals(input.IdToken))
                ) && 
                (
                    this.AccessToken == input.AccessToken ||
                    (this.AccessToken != null &&
                    this.AccessToken.Equals(input.AccessToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.IdToken != null)
                    hashCode = hashCode * 59 + this.IdToken.GetHashCode();
                if (this.AccessToken != null)
                    hashCode = hashCode * 59 + this.AccessToken.GetHashCode();
                return hashCode;
            }
        }
    }
}
