/* 
 * Stardust API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-22T22:32:07Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Stardust.CoreSDK.Client.SwaggerDateConverter;

namespace Stardust.CoreSDK.Model
{
    /// <summary>
    /// SDGameGetResponseFees
    /// </summary>
    [DataContract]
        public partial class SDGameGetResponseFees :  IEquatable<SDGameGetResponseFees>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SDGameGetResponseFees" /> class.
        /// </summary>
        /// <param name="feePercentage">The integer value of feePercentage. .</param>
        /// <param name="feeType">The type of fee.</param>
        public SDGameGetResponseFees(int? feePercentage = default(int?), string feeType = default(string))
        {
            this.FeePercentage = feePercentage;
            this.FeeType = feeType;
        }
        
        /// <summary>
        /// The integer value of feePercentage. 
        /// </summary>
        /// <value>The integer value of feePercentage. </value>
        [DataMember(Name="feePercentage", EmitDefaultValue=false)]
        public int? FeePercentage { get; set; }

        /// <summary>
        /// The type of fee
        /// </summary>
        /// <value>The type of fee</value>
        [DataMember(Name="feeType", EmitDefaultValue=false)]
        public string FeeType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SDGameGetResponseFees {\n");
            sb.Append("  FeePercentage: ").Append(FeePercentage).Append("\n");
            sb.Append("  FeeType: ").Append(FeeType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SDGameGetResponseFees);
        }

        /// <summary>
        /// Returns true if SDGameGetResponseFees instances are equal
        /// </summary>
        /// <param name="input">Instance of SDGameGetResponseFees to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SDGameGetResponseFees input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FeePercentage == input.FeePercentage ||
                    (this.FeePercentage != null &&
                    this.FeePercentage.Equals(input.FeePercentage))
                ) && 
                (
                    this.FeeType == input.FeeType ||
                    (this.FeeType != null &&
                    this.FeeType.Equals(input.FeeType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FeePercentage != null)
                    hashCode = hashCode * 59 + this.FeePercentage.GetHashCode();
                if (this.FeeType != null)
                    hashCode = hashCode * 59 + this.FeeType.GetHashCode();
                return hashCode;
            }
        }
    }
}
