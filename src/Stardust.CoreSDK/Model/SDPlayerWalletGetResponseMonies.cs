/* 
 * Stardust API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-22T22:32:07Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Stardust.CoreSDK.Client.SwaggerDateConverter;

namespace Stardust.CoreSDK.Model
{
    /// <summary>
    /// The Money object representation of the balance
    /// </summary>
    [DataContract]
        public partial class SDPlayerWalletGetResponseMonies :  IEquatable<SDPlayerWalletGetResponseMonies>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SDPlayerWalletGetResponseMonies" /> class.
        /// </summary>
        /// <param name="amount">The balance in minor units. ex: 2000000 for 2 coins USDC.</param>
        /// <param name="currencyCode">The currency code associated with the amount. ex: &#x27;USDC&#x27;.</param>
        public SDPlayerWalletGetResponseMonies(string amount = default(string), string currencyCode = default(string))
        {
            this.Amount = amount;
            this.CurrencyCode = currencyCode;
        }
        
        /// <summary>
        /// The balance in minor units. ex: 2000000 for 2 coins USDC
        /// </summary>
        /// <value>The balance in minor units. ex: 2000000 for 2 coins USDC</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public string Amount { get; set; }

        /// <summary>
        /// The currency code associated with the amount. ex: &#x27;USDC&#x27;
        /// </summary>
        /// <value>The currency code associated with the amount. ex: &#x27;USDC&#x27;</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SDPlayerWalletGetResponseMonies {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SDPlayerWalletGetResponseMonies);
        }

        /// <summary>
        /// Returns true if SDPlayerWalletGetResponseMonies instances are equal
        /// </summary>
        /// <param name="input">Instance of SDPlayerWalletGetResponseMonies to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SDPlayerWalletGetResponseMonies input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                return hashCode;
            }
        }
    }
}
