/* 
 * Stardust API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-22T22:32:07Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Stardust.CoreSDK.Client.SwaggerDateConverter;

namespace Stardust.CoreSDK.Model
{
    /// <summary>
    /// SDTokenTransferRequest
    /// </summary>
    [DataContract]
        public partial class SDTokenTransferRequest :  IEquatable<SDTokenTransferRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SDTokenTransferRequest" /> class.
        /// </summary>
        /// <param name="fromPlayerId">The Player&#x27;s id, can be found with Player/getId(s). (ex. CzySggxVQz51jciGRFDY7d5BER2fav6TNEnPGjusPJPd) (required).</param>
        /// <param name="toPlayerId">The Player&#x27;s id, can be found with Player/getId(s). (ex. 53ywNSVp46QpiA6S86DLLfeKVfjcSAFxHR2L9j8tnte2) (required).</param>
        /// <param name="tokenObjects">An array of objects of which tokens to transfer (ex. [{tokenId: 5, amount: \&quot;3\&quot;}]) (required).</param>
        public SDTokenTransferRequest(string fromPlayerId = default(string), string toPlayerId = default(string), List<SDTokenBurnRequestTokenObjects> tokenObjects = default(List<SDTokenBurnRequestTokenObjects>))
        {
            // to ensure "fromPlayerId" is required (not null)
            if (fromPlayerId == null)
            {
                throw new InvalidDataException("fromPlayerId is a required property for SDTokenTransferRequest and cannot be null");
            }
            else
            {
                this.FromPlayerId = fromPlayerId;
            }
            // to ensure "toPlayerId" is required (not null)
            if (toPlayerId == null)
            {
                throw new InvalidDataException("toPlayerId is a required property for SDTokenTransferRequest and cannot be null");
            }
            else
            {
                this.ToPlayerId = toPlayerId;
            }
            // to ensure "tokenObjects" is required (not null)
            if (tokenObjects == null)
            {
                throw new InvalidDataException("tokenObjects is a required property for SDTokenTransferRequest and cannot be null");
            }
            else
            {
                this.TokenObjects = tokenObjects;
            }
        }
        
        /// <summary>
        /// The Player&#x27;s id, can be found with Player/getId(s). (ex. CzySggxVQz51jciGRFDY7d5BER2fav6TNEnPGjusPJPd)
        /// </summary>
        /// <value>The Player&#x27;s id, can be found with Player/getId(s). (ex. CzySggxVQz51jciGRFDY7d5BER2fav6TNEnPGjusPJPd)</value>
        [DataMember(Name="fromPlayerId", EmitDefaultValue=false)]
        public string FromPlayerId { get; set; }

        /// <summary>
        /// The Player&#x27;s id, can be found with Player/getId(s). (ex. 53ywNSVp46QpiA6S86DLLfeKVfjcSAFxHR2L9j8tnte2)
        /// </summary>
        /// <value>The Player&#x27;s id, can be found with Player/getId(s). (ex. 53ywNSVp46QpiA6S86DLLfeKVfjcSAFxHR2L9j8tnte2)</value>
        [DataMember(Name="toPlayerId", EmitDefaultValue=false)]
        public string ToPlayerId { get; set; }

        /// <summary>
        /// An array of objects of which tokens to transfer (ex. [{tokenId: 5, amount: \&quot;3\&quot;}])
        /// </summary>
        /// <value>An array of objects of which tokens to transfer (ex. [{tokenId: 5, amount: \&quot;3\&quot;}])</value>
        [DataMember(Name="tokenObjects", EmitDefaultValue=false)]
        public List<SDTokenBurnRequestTokenObjects> TokenObjects { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SDTokenTransferRequest {\n");
            sb.Append("  FromPlayerId: ").Append(FromPlayerId).Append("\n");
            sb.Append("  ToPlayerId: ").Append(ToPlayerId).Append("\n");
            sb.Append("  TokenObjects: ").Append(TokenObjects).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SDTokenTransferRequest);
        }

        /// <summary>
        /// Returns true if SDTokenTransferRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SDTokenTransferRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SDTokenTransferRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FromPlayerId == input.FromPlayerId ||
                    (this.FromPlayerId != null &&
                    this.FromPlayerId.Equals(input.FromPlayerId))
                ) && 
                (
                    this.ToPlayerId == input.ToPlayerId ||
                    (this.ToPlayerId != null &&
                    this.ToPlayerId.Equals(input.ToPlayerId))
                ) && 
                (
                    this.TokenObjects == input.TokenObjects ||
                    this.TokenObjects != null &&
                    input.TokenObjects != null &&
                    this.TokenObjects.SequenceEqual(input.TokenObjects)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FromPlayerId != null)
                    hashCode = hashCode * 59 + this.FromPlayerId.GetHashCode();
                if (this.ToPlayerId != null)
                    hashCode = hashCode * 59 + this.ToPlayerId.GetHashCode();
                if (this.TokenObjects != null)
                    hashCode = hashCode * 59 + this.TokenObjects.GetHashCode();
                return hashCode;
            }
        }
    }
}
