/* 
 * Stardust API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-22T22:32:07Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Stardust.CoreSDK.Client.SwaggerDateConverter;

namespace Stardust.CoreSDK.Model
{
    /// <summary>
    /// SDPlayerWithdrawRequest
    /// </summary>
    [DataContract]
        public partial class SDPlayerWithdrawRequest :  IEquatable<SDPlayerWithdrawRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SDPlayerWithdrawRequest" /> class.
        /// </summary>
        /// <param name="address">Blockchain Address (required).</param>
        /// <param name="playerId">The Player&#x27;s id, can be found with Player/getId(s). Also returned from player/create (ex. CzySggxVQz51jciGRFDY7d5BER2fav6TNEnPGjusPJPd) (required).</param>
        /// <param name="tokenObjects">array of Token objects (required).</param>
        public SDPlayerWithdrawRequest(string address = default(string), string playerId = default(string), List<SDPlayerWithdrawObject> tokenObjects = default(List<SDPlayerWithdrawObject>))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for SDPlayerWithdrawRequest and cannot be null");
            }
            else
            {
                this.Address = address;
            }
            // to ensure "playerId" is required (not null)
            if (playerId == null)
            {
                throw new InvalidDataException("playerId is a required property for SDPlayerWithdrawRequest and cannot be null");
            }
            else
            {
                this.PlayerId = playerId;
            }
            // to ensure "tokenObjects" is required (not null)
            if (tokenObjects == null)
            {
                throw new InvalidDataException("tokenObjects is a required property for SDPlayerWithdrawRequest and cannot be null");
            }
            else
            {
                this.TokenObjects = tokenObjects;
            }
        }
        
        /// <summary>
        /// Blockchain Address
        /// </summary>
        /// <value>Blockchain Address</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// The Player&#x27;s id, can be found with Player/getId(s). Also returned from player/create (ex. CzySggxVQz51jciGRFDY7d5BER2fav6TNEnPGjusPJPd)
        /// </summary>
        /// <value>The Player&#x27;s id, can be found with Player/getId(s). Also returned from player/create (ex. CzySggxVQz51jciGRFDY7d5BER2fav6TNEnPGjusPJPd)</value>
        [DataMember(Name="playerId", EmitDefaultValue=false)]
        public string PlayerId { get; set; }

        /// <summary>
        /// array of Token objects
        /// </summary>
        /// <value>array of Token objects</value>
        [DataMember(Name="tokenObjects", EmitDefaultValue=false)]
        public List<SDPlayerWithdrawObject> TokenObjects { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SDPlayerWithdrawRequest {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  PlayerId: ").Append(PlayerId).Append("\n");
            sb.Append("  TokenObjects: ").Append(TokenObjects).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SDPlayerWithdrawRequest);
        }

        /// <summary>
        /// Returns true if SDPlayerWithdrawRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SDPlayerWithdrawRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SDPlayerWithdrawRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.PlayerId == input.PlayerId ||
                    (this.PlayerId != null &&
                    this.PlayerId.Equals(input.PlayerId))
                ) && 
                (
                    this.TokenObjects == input.TokenObjects ||
                    this.TokenObjects != null &&
                    input.TokenObjects != null &&
                    this.TokenObjects.SequenceEqual(input.TokenObjects)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.PlayerId != null)
                    hashCode = hashCode * 59 + this.PlayerId.GetHashCode();
                if (this.TokenObjects != null)
                    hashCode = hashCode * 59 + this.TokenObjects.GetHashCode();
                return hashCode;
            }
        }
    }
}
