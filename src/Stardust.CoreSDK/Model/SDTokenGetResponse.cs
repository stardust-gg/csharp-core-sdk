/* 
 * Stardust API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-22T22:32:07Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Stardust.CoreSDK.Client.SwaggerDateConverter;

namespace Stardust.CoreSDK.Model
{
    /// <summary>
    /// token data
    /// </summary>
    [DataContract]
        public partial class SDTokenGetResponse :  IEquatable<SDTokenGetResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SDTokenGetResponse" /> class.
        /// </summary>
        /// <param name="gameId">Game ID Number (unsigned 32 bit integer) (required).</param>
        /// <param name="templateId">Template ID Number (unsigned 32 bit integer) (required).</param>
        /// <param name="id">The ID of the token created (required).</param>
        /// <param name="name">The name of the template.</param>
        /// <param name="flags">flags (required).</param>
        /// <param name="props">props (required).</param>
        /// <param name="owner">Game Owner&#x27;s Public Key.</param>
        /// <param name="publicMetadata">Returned to marketplaces as token metadata.</param>
        public SDTokenGetResponse(int? gameId = default(int?), int? templateId = default(int?), int? id = default(int?), string name = default(string), int? flags = default(int?), SDTemplateGetTokensResponseTokenProps props = default(SDTemplateGetTokensResponseTokenProps), string owner = default(string), Object publicMetadata = default(Object))
        {
            // to ensure "gameId" is required (not null)
            if (gameId == null)
            {
                throw new InvalidDataException("gameId is a required property for SDTokenGetResponse and cannot be null");
            }
            else
            {
                this.GameId = gameId;
            }
            // to ensure "templateId" is required (not null)
            if (templateId == null)
            {
                throw new InvalidDataException("templateId is a required property for SDTokenGetResponse and cannot be null");
            }
            else
            {
                this.TemplateId = templateId;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for SDTokenGetResponse and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "flags" is required (not null)
            if (flags == null)
            {
                throw new InvalidDataException("flags is a required property for SDTokenGetResponse and cannot be null");
            }
            else
            {
                this.Flags = flags;
            }
            // to ensure "props" is required (not null)
            if (props == null)
            {
                throw new InvalidDataException("props is a required property for SDTokenGetResponse and cannot be null");
            }
            else
            {
                this.Props = props;
            }
            this.Name = name;
            this.Owner = owner;
            this.PublicMetadata = publicMetadata;
        }
        
        /// <summary>
        /// Game ID Number (unsigned 32 bit integer)
        /// </summary>
        /// <value>Game ID Number (unsigned 32 bit integer)</value>
        [DataMember(Name="gameId", EmitDefaultValue=false)]
        public int? GameId { get; set; }

        /// <summary>
        /// Template ID Number (unsigned 32 bit integer)
        /// </summary>
        /// <value>Template ID Number (unsigned 32 bit integer)</value>
        [DataMember(Name="templateId", EmitDefaultValue=false)]
        public int? TemplateId { get; set; }

        /// <summary>
        /// The ID of the token created
        /// </summary>
        /// <value>The ID of the token created</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The name of the template
        /// </summary>
        /// <value>The name of the template</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Flags
        /// </summary>
        [DataMember(Name="flags", EmitDefaultValue=false)]
        public int? Flags { get; set; }

        /// <summary>
        /// Gets or Sets Props
        /// </summary>
        [DataMember(Name="props", EmitDefaultValue=false)]
        public SDTemplateGetTokensResponseTokenProps Props { get; set; }

        /// <summary>
        /// Game Owner&#x27;s Public Key
        /// </summary>
        /// <value>Game Owner&#x27;s Public Key</value>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public string Owner { get; set; }

        /// <summary>
        /// Returned to marketplaces as token metadata
        /// </summary>
        /// <value>Returned to marketplaces as token metadata</value>
        [DataMember(Name="publicMetadata", EmitDefaultValue=false)]
        public Object PublicMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SDTokenGetResponse {\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  Props: ").Append(Props).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  PublicMetadata: ").Append(PublicMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SDTokenGetResponse);
        }

        /// <summary>
        /// Returns true if SDTokenGetResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SDTokenGetResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SDTokenGetResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GameId == input.GameId ||
                    (this.GameId != null &&
                    this.GameId.Equals(input.GameId))
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Flags == input.Flags ||
                    (this.Flags != null &&
                    this.Flags.Equals(input.Flags))
                ) && 
                (
                    this.Props == input.Props ||
                    (this.Props != null &&
                    this.Props.Equals(input.Props))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.PublicMetadata == input.PublicMetadata ||
                    (this.PublicMetadata != null &&
                    this.PublicMetadata.Equals(input.PublicMetadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GameId != null)
                    hashCode = hashCode * 59 + this.GameId.GetHashCode();
                if (this.TemplateId != null)
                    hashCode = hashCode * 59 + this.TemplateId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Flags != null)
                    hashCode = hashCode * 59 + this.Flags.GetHashCode();
                if (this.Props != null)
                    hashCode = hashCode * 59 + this.Props.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.PublicMetadata != null)
                    hashCode = hashCode * 59 + this.PublicMetadata.GetHashCode();
                return hashCode;
            }
        }
    }
}
