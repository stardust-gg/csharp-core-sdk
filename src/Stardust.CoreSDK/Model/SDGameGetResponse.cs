/* 
 * Stardust API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-22T22:32:07Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Stardust.CoreSDK.Client.SwaggerDateConverter;

namespace Stardust.CoreSDK.Model
{
    /// <summary>
    /// This is the data output json model
    /// </summary>
    [DataContract]
        public partial class SDGameGetResponse :  IEquatable<SDGameGetResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SDGameGetResponse" /> class.
        /// </summary>
        /// <param name="id">Game ID Number (unsigned 32 bit integer) (required).</param>
        /// <param name="ownerId">Game Owner ID (required).</param>
        /// <param name="name">Game name (required).</param>
        /// <param name="desc">Game description (required).</param>
        /// <param name="image">Game image (required).</param>
        /// <param name="bucketName">Game bucket name (required).</param>
        /// <param name="news">Game news.</param>
        /// <param name="fees">fees.</param>
        /// <param name="props">Game properties.</param>
        /// <param name="testMode">If on test mode features are enabled. Currently in development..</param>
        public SDGameGetResponse(int? id = default(int?), string ownerId = default(string), string name = default(string), string desc = default(string), string image = default(string), string bucketName = default(string), string news = default(string), List<SDGameGetResponseFees> fees = default(List<SDGameGetResponseFees>), Object props = default(Object), bool? testMode = default(bool?))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for SDGameGetResponse and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "ownerId" is required (not null)
            if (ownerId == null)
            {
                throw new InvalidDataException("ownerId is a required property for SDGameGetResponse and cannot be null");
            }
            else
            {
                this.OwnerId = ownerId;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for SDGameGetResponse and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "desc" is required (not null)
            if (desc == null)
            {
                throw new InvalidDataException("desc is a required property for SDGameGetResponse and cannot be null");
            }
            else
            {
                this.Desc = desc;
            }
            // to ensure "image" is required (not null)
            if (image == null)
            {
                throw new InvalidDataException("image is a required property for SDGameGetResponse and cannot be null");
            }
            else
            {
                this.Image = image;
            }
            // to ensure "bucketName" is required (not null)
            if (bucketName == null)
            {
                throw new InvalidDataException("bucketName is a required property for SDGameGetResponse and cannot be null");
            }
            else
            {
                this.BucketName = bucketName;
            }
            this.News = news;
            this.Fees = fees;
            this.Props = props;
            this.TestMode = testMode;
        }
        
        /// <summary>
        /// Game ID Number (unsigned 32 bit integer)
        /// </summary>
        /// <value>Game ID Number (unsigned 32 bit integer)</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Game Owner ID
        /// </summary>
        /// <value>Game Owner ID</value>
        [DataMember(Name="ownerId", EmitDefaultValue=false)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Game name
        /// </summary>
        /// <value>Game name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Game description
        /// </summary>
        /// <value>Game description</value>
        [DataMember(Name="desc", EmitDefaultValue=false)]
        public string Desc { get; set; }

        /// <summary>
        /// Game image
        /// </summary>
        /// <value>Game image</value>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// Game bucket name
        /// </summary>
        /// <value>Game bucket name</value>
        [DataMember(Name="bucketName", EmitDefaultValue=false)]
        public string BucketName { get; set; }

        /// <summary>
        /// Game news
        /// </summary>
        /// <value>Game news</value>
        [DataMember(Name="news", EmitDefaultValue=false)]
        public string News { get; set; }

        /// <summary>
        /// Gets or Sets Fees
        /// </summary>
        [DataMember(Name="fees", EmitDefaultValue=false)]
        public List<SDGameGetResponseFees> Fees { get; set; }

        /// <summary>
        /// Game properties
        /// </summary>
        /// <value>Game properties</value>
        [DataMember(Name="props", EmitDefaultValue=false)]
        public Object Props { get; set; }

        /// <summary>
        /// If on test mode features are enabled. Currently in development.
        /// </summary>
        /// <value>If on test mode features are enabled. Currently in development.</value>
        [DataMember(Name="testMode", EmitDefaultValue=false)]
        public bool? TestMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SDGameGetResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Desc: ").Append(Desc).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  BucketName: ").Append(BucketName).Append("\n");
            sb.Append("  News: ").Append(News).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  Props: ").Append(Props).Append("\n");
            sb.Append("  TestMode: ").Append(TestMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SDGameGetResponse);
        }

        /// <summary>
        /// Returns true if SDGameGetResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SDGameGetResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SDGameGetResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Desc == input.Desc ||
                    (this.Desc != null &&
                    this.Desc.Equals(input.Desc))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.BucketName == input.BucketName ||
                    (this.BucketName != null &&
                    this.BucketName.Equals(input.BucketName))
                ) && 
                (
                    this.News == input.News ||
                    (this.News != null &&
                    this.News.Equals(input.News))
                ) && 
                (
                    this.Fees == input.Fees ||
                    this.Fees != null &&
                    input.Fees != null &&
                    this.Fees.SequenceEqual(input.Fees)
                ) && 
                (
                    this.Props == input.Props ||
                    (this.Props != null &&
                    this.Props.Equals(input.Props))
                ) && 
                (
                    this.TestMode == input.TestMode ||
                    (this.TestMode != null &&
                    this.TestMode.Equals(input.TestMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.OwnerId != null)
                    hashCode = hashCode * 59 + this.OwnerId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Desc != null)
                    hashCode = hashCode * 59 + this.Desc.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.BucketName != null)
                    hashCode = hashCode * 59 + this.BucketName.GetHashCode();
                if (this.News != null)
                    hashCode = hashCode * 59 + this.News.GetHashCode();
                if (this.Fees != null)
                    hashCode = hashCode * 59 + this.Fees.GetHashCode();
                if (this.Props != null)
                    hashCode = hashCode * 59 + this.Props.GetHashCode();
                if (this.TestMode != null)
                    hashCode = hashCode * 59 + this.TestMode.GetHashCode();
                return hashCode;
            }
        }
    }
}
