/* 
 * Stardust API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-22T22:32:07Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Stardust.CoreSDK.Client.SwaggerDateConverter;

namespace Stardust.CoreSDK.Model
{
    /// <summary>
    /// SDTemplateGetTokensResponseTokenProps
    /// </summary>
    [DataContract]
        public partial class SDTemplateGetTokensResponseTokenProps :  IEquatable<SDTemplateGetTokensResponseTokenProps>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SDTemplateGetTokensResponseTokenProps" /> class.
        /// </summary>
        /// <param name="immutable">immutable (required).</param>
        /// <param name="mutable">mutable (required).</param>
        /// <param name="inherited">inherited (required).</param>
        public SDTemplateGetTokensResponseTokenProps(Object immutable = default(Object), Object mutable = default(Object), Object inherited = default(Object))
        {
            // to ensure "immutable" is required (not null)
            if (immutable == null)
            {
                throw new InvalidDataException("immutable is a required property for SDTemplateGetTokensResponseTokenProps and cannot be null");
            }
            else
            {
                this.Immutable = immutable;
            }
            // to ensure "mutable" is required (not null)
            if (mutable == null)
            {
                throw new InvalidDataException("mutable is a required property for SDTemplateGetTokensResponseTokenProps and cannot be null");
            }
            else
            {
                this.Mutable = mutable;
            }
            // to ensure "inherited" is required (not null)
            if (inherited == null)
            {
                throw new InvalidDataException("inherited is a required property for SDTemplateGetTokensResponseTokenProps and cannot be null");
            }
            else
            {
                this.Inherited = inherited;
            }
        }
        
        /// <summary>
        /// Gets or Sets Immutable
        /// </summary>
        [DataMember(Name="immutable", EmitDefaultValue=false)]
        public Object Immutable { get; set; }

        /// <summary>
        /// Gets or Sets Mutable
        /// </summary>
        [DataMember(Name="mutable", EmitDefaultValue=false)]
        public Object Mutable { get; set; }

        /// <summary>
        /// Gets or Sets Inherited
        /// </summary>
        [DataMember(Name="inherited", EmitDefaultValue=false)]
        public Object Inherited { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SDTemplateGetTokensResponseTokenProps {\n");
            sb.Append("  Immutable: ").Append(Immutable).Append("\n");
            sb.Append("  Mutable: ").Append(Mutable).Append("\n");
            sb.Append("  Inherited: ").Append(Inherited).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SDTemplateGetTokensResponseTokenProps);
        }

        /// <summary>
        /// Returns true if SDTemplateGetTokensResponseTokenProps instances are equal
        /// </summary>
        /// <param name="input">Instance of SDTemplateGetTokensResponseTokenProps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SDTemplateGetTokensResponseTokenProps input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Immutable == input.Immutable ||
                    (this.Immutable != null &&
                    this.Immutable.Equals(input.Immutable))
                ) && 
                (
                    this.Mutable == input.Mutable ||
                    (this.Mutable != null &&
                    this.Mutable.Equals(input.Mutable))
                ) && 
                (
                    this.Inherited == input.Inherited ||
                    (this.Inherited != null &&
                    this.Inherited.Equals(input.Inherited))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Immutable != null)
                    hashCode = hashCode * 59 + this.Immutable.GetHashCode();
                if (this.Mutable != null)
                    hashCode = hashCode * 59 + this.Mutable.GetHashCode();
                if (this.Inherited != null)
                    hashCode = hashCode * 59 + this.Inherited.GetHashCode();
                return hashCode;
            }
        }
    }
}
