/* 
 * Stardust API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-22T22:32:07Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Stardust.CoreSDK.Client.SwaggerDateConverter;

namespace Stardust.CoreSDK.Model
{
    /// <summary>
    /// SDTemplateGetTokensResponsePlayer
    /// </summary>
    [DataContract]
        public partial class SDTemplateGetTokensResponsePlayer :  IEquatable<SDTemplateGetTokensResponsePlayer>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SDTemplateGetTokensResponsePlayer" /> class.
        /// </summary>
        /// <param name="id">Player ID in the form of a UUID (required).</param>
        /// <param name="uniqueId">Player ID in the form of a the game owner&#x27;s internal playerId, i.e. email address (required).</param>
        /// <param name="image">URL of image cached by Stardust.</param>
        /// <param name="deletedAt">Timestamp of when a player was deleted.</param>
        public SDTemplateGetTokensResponsePlayer(string id = default(string), string uniqueId = default(string), string image = default(string), string deletedAt = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for SDTemplateGetTokensResponsePlayer and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "uniqueId" is required (not null)
            if (uniqueId == null)
            {
                throw new InvalidDataException("uniqueId is a required property for SDTemplateGetTokensResponsePlayer and cannot be null");
            }
            else
            {
                this.UniqueId = uniqueId;
            }
            this.Image = image;
            this.DeletedAt = deletedAt;
        }
        
        /// <summary>
        /// Player ID in the form of a UUID
        /// </summary>
        /// <value>Player ID in the form of a UUID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Player ID in the form of a the game owner&#x27;s internal playerId, i.e. email address
        /// </summary>
        /// <value>Player ID in the form of a the game owner&#x27;s internal playerId, i.e. email address</value>
        [DataMember(Name="uniqueId", EmitDefaultValue=false)]
        public string UniqueId { get; set; }

        /// <summary>
        /// URL of image cached by Stardust
        /// </summary>
        /// <value>URL of image cached by Stardust</value>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// Timestamp of when a player was deleted
        /// </summary>
        /// <value>Timestamp of when a player was deleted</value>
        [DataMember(Name="deletedAt", EmitDefaultValue=false)]
        public string DeletedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SDTemplateGetTokensResponsePlayer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UniqueId: ").Append(UniqueId).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SDTemplateGetTokensResponsePlayer);
        }

        /// <summary>
        /// Returns true if SDTemplateGetTokensResponsePlayer instances are equal
        /// </summary>
        /// <param name="input">Instance of SDTemplateGetTokensResponsePlayer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SDTemplateGetTokensResponsePlayer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UniqueId == input.UniqueId ||
                    (this.UniqueId != null &&
                    this.UniqueId.Equals(input.UniqueId))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                ) && 
                (
                    this.DeletedAt == input.DeletedAt ||
                    (this.DeletedAt != null &&
                    this.DeletedAt.Equals(input.DeletedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.UniqueId != null)
                    hashCode = hashCode * 59 + this.UniqueId.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                if (this.DeletedAt != null)
                    hashCode = hashCode * 59 + this.DeletedAt.GetHashCode();
                return hashCode;
            }
        }
    }
}
