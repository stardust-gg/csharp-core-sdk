/* 
 * Stardust API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-22T22:32:07Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Stardust.CoreSDK.Client;
using Stardust.CoreSDK.Model;

namespace Stardust.CoreSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IPlayerEndpointsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Player Count
        /// </summary>
        /// <remarks>
        /// Get Player count within a game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SDPlayerCountResponse</returns>
        SDPlayerCountResponse PlayerCountGet ();

        /// <summary>
        /// Get Player Count
        /// </summary>
        /// <remarks>
        /// Get Player count within a game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SDPlayerCountResponse</returns>
        ApiResponse<SDPlayerCountResponse> PlayerCountGetWithHttpInfo ();
        /// <summary>
        /// Create Player
        /// </summary>
        /// <remarks>
        /// Create a Player for a game. Returns their player id which can be used to reference them later in Stardust&#x27;s system
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SDPlayerCreateResponse</returns>
        SDPlayerCreateResponse PlayerCreatePost (SDPlayerCreateRequest body);

        /// <summary>
        /// Create Player
        /// </summary>
        /// <remarks>
        /// Create a Player for a game. Returns their player id which can be used to reference them later in Stardust&#x27;s system
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SDPlayerCreateResponse</returns>
        ApiResponse<SDPlayerCreateResponse> PlayerCreatePostWithHttpInfo (SDPlayerCreateRequest body);
        /// <summary>
        /// Get All Players
        /// </summary>
        /// <remarks>
        /// Get the List of All Players in Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">position in list (optional)</param>
        /// <param name="filter">Find a substring within the Player unique ID field (optional)</param>
        /// <param name="limit">maximum items returned in list (optional)</param>
        /// <returns>SDPlayerGetAllResponses</returns>
        SDPlayerGetAllResponses PlayerGetAllGet (string start = null, string filter = null, string limit = null);

        /// <summary>
        /// Get All Players
        /// </summary>
        /// <remarks>
        /// Get the List of All Players in Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">position in list (optional)</param>
        /// <param name="filter">Find a substring within the Player unique ID field (optional)</param>
        /// <param name="limit">maximum items returned in list (optional)</param>
        /// <returns>ApiResponse of SDPlayerGetAllResponses</returns>
        ApiResponse<SDPlayerGetAllResponses> PlayerGetAllGetWithHttpInfo (string start = null, string filter = null, string limit = null);
        /// <summary>
        /// Get Player
        /// </summary>
        /// <remarks>
        /// Get Details of a Player Within a Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <returns>SDPlayerGetResponse</returns>
        SDPlayerGetResponse PlayerGetGet (string playerId);

        /// <summary>
        /// Get Player
        /// </summary>
        /// <remarks>
        /// Get Details of a Player Within a Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <returns>ApiResponse of SDPlayerGetResponse</returns>
        ApiResponse<SDPlayerGetResponse> PlayerGetGetWithHttpInfo (string playerId);
        /// <summary>
        /// Get Player ID
        /// </summary>
        /// <remarks>
        /// Get a Player&#x27;s ID via their Unique ID
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">Player&#x27;s Unique ID</param>
        /// <returns>SDPlayerGetIdResponse</returns>
        SDPlayerGetIdResponse PlayerGetIdGet (string uniqueId);

        /// <summary>
        /// Get Player ID
        /// </summary>
        /// <remarks>
        /// Get a Player&#x27;s ID via their Unique ID
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">Player&#x27;s Unique ID</param>
        /// <returns>ApiResponse of SDPlayerGetIdResponse</returns>
        ApiResponse<SDPlayerGetIdResponse> PlayerGetIdGetWithHttpInfo (string uniqueId);
        /// <summary>
        /// Get All Player IDs
        /// </summary>
        /// <remarks>
        /// Get All Player IDs for a Given Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SDPlayerGetIdsResponses</returns>
        SDPlayerGetIdsResponses PlayerGetIdsGet ();

        /// <summary>
        /// Get All Player IDs
        /// </summary>
        /// <remarks>
        /// Get All Player IDs for a Given Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SDPlayerGetIdsResponses</returns>
        ApiResponse<SDPlayerGetIdsResponses> PlayerGetIdsGetWithHttpInfo ();
        /// <summary>
        /// Get Player Inventory
        /// </summary>
        /// <remarks>
        /// Get a players inventory and all the items it holds
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <param name="start">position in list (optional)</param>
        /// <param name="tokenIds">Comma-Separated String of token ids (ex. &#x27;3589, 3580&#x27;) (optional)</param>
        /// <param name="limit">maximum items returned in list (optional)</param>
        /// <returns>SDPlayerGetInventoryResponses</returns>
        SDPlayerGetInventoryResponses PlayerGetInventoryGet (string playerId, string start = null, string tokenIds = null, string limit = null);

        /// <summary>
        /// Get Player Inventory
        /// </summary>
        /// <remarks>
        /// Get a players inventory and all the items it holds
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <param name="start">position in list (optional)</param>
        /// <param name="tokenIds">Comma-Separated String of token ids (ex. &#x27;3589, 3580&#x27;) (optional)</param>
        /// <param name="limit">maximum items returned in list (optional)</param>
        /// <returns>ApiResponse of SDPlayerGetInventoryResponses</returns>
        ApiResponse<SDPlayerGetInventoryResponses> PlayerGetInventoryGetWithHttpInfo (string playerId, string start = null, string tokenIds = null, string limit = null);
        /// <summary>
        /// Mutate Player
        /// </summary>
        /// <remarks>
        /// Change player data
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Empty</returns>
        Empty PlayerMutatePut (SDPlayerMutateRequest body);

        /// <summary>
        /// Mutate Player
        /// </summary>
        /// <remarks>
        /// Change player data
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> PlayerMutatePutWithHttpInfo (SDPlayerMutateRequest body);
        /// <summary>
        /// Remove Player
        /// </summary>
        /// <remarks>
        /// Removes (hides) a player from your game. This is not permanent.
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player Id returned from player/create a UUID, i.e. 802760b0-2bb5-4fba-9237-895ed02cf8d8</param>
        /// <returns>Empty</returns>
        Empty PlayerRemoveDelete (string playerId);

        /// <summary>
        /// Remove Player
        /// </summary>
        /// <remarks>
        /// Removes (hides) a player from your game. This is not permanent.
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player Id returned from player/create a UUID, i.e. 802760b0-2bb5-4fba-9237-895ed02cf8d8</param>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> PlayerRemoveDeleteWithHttpInfo (string playerId);
        /// <summary>
        /// Get Player Wallet
        /// </summary>
        /// <remarks>
        /// Get player&#x27;s wallet within a game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <returns>SDPlayerWalletGetResponse</returns>
        SDPlayerWalletGetResponse PlayerWalletGetGet (string playerId);

        /// <summary>
        /// Get Player Wallet
        /// </summary>
        /// <remarks>
        /// Get player&#x27;s wallet within a game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <returns>ApiResponse of SDPlayerWalletGetResponse</returns>
        ApiResponse<SDPlayerWalletGetResponse> PlayerWalletGetGetWithHttpInfo (string playerId);
        /// <summary>
        /// Withdraw From Player
        /// </summary>
        /// <remarks>
        /// Withdraw a Player&#x27;s Tokens from their Stardust Wallet
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Empty</returns>
        Empty PlayerWithdrawPost (SDPlayerWithdrawRequest body);

        /// <summary>
        /// Withdraw From Player
        /// </summary>
        /// <remarks>
        /// Withdraw a Player&#x27;s Tokens from their Stardust Wallet
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> PlayerWithdrawPostWithHttpInfo (SDPlayerWithdrawRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Player Count
        /// </summary>
        /// <remarks>
        /// Get Player count within a game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SDPlayerCountResponse</returns>
        System.Threading.Tasks.Task<SDPlayerCountResponse> PlayerCountGetAsync ();

        /// <summary>
        /// Get Player Count
        /// </summary>
        /// <remarks>
        /// Get Player count within a game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SDPlayerCountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SDPlayerCountResponse>> PlayerCountGetAsyncWithHttpInfo ();
        /// <summary>
        /// Create Player
        /// </summary>
        /// <remarks>
        /// Create a Player for a game. Returns their player id which can be used to reference them later in Stardust&#x27;s system
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SDPlayerCreateResponse</returns>
        System.Threading.Tasks.Task<SDPlayerCreateResponse> PlayerCreatePostAsync (SDPlayerCreateRequest body);

        /// <summary>
        /// Create Player
        /// </summary>
        /// <remarks>
        /// Create a Player for a game. Returns their player id which can be used to reference them later in Stardust&#x27;s system
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SDPlayerCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SDPlayerCreateResponse>> PlayerCreatePostAsyncWithHttpInfo (SDPlayerCreateRequest body);
        /// <summary>
        /// Get All Players
        /// </summary>
        /// <remarks>
        /// Get the List of All Players in Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">position in list (optional)</param>
        /// <param name="filter">Find a substring within the Player unique ID field (optional)</param>
        /// <param name="limit">maximum items returned in list (optional)</param>
        /// <returns>Task of SDPlayerGetAllResponses</returns>
        System.Threading.Tasks.Task<SDPlayerGetAllResponses> PlayerGetAllGetAsync (string start = null, string filter = null, string limit = null);

        /// <summary>
        /// Get All Players
        /// </summary>
        /// <remarks>
        /// Get the List of All Players in Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">position in list (optional)</param>
        /// <param name="filter">Find a substring within the Player unique ID field (optional)</param>
        /// <param name="limit">maximum items returned in list (optional)</param>
        /// <returns>Task of ApiResponse (SDPlayerGetAllResponses)</returns>
        System.Threading.Tasks.Task<ApiResponse<SDPlayerGetAllResponses>> PlayerGetAllGetAsyncWithHttpInfo (string start = null, string filter = null, string limit = null);
        /// <summary>
        /// Get Player
        /// </summary>
        /// <remarks>
        /// Get Details of a Player Within a Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <returns>Task of SDPlayerGetResponse</returns>
        System.Threading.Tasks.Task<SDPlayerGetResponse> PlayerGetGetAsync (string playerId);

        /// <summary>
        /// Get Player
        /// </summary>
        /// <remarks>
        /// Get Details of a Player Within a Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <returns>Task of ApiResponse (SDPlayerGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SDPlayerGetResponse>> PlayerGetGetAsyncWithHttpInfo (string playerId);
        /// <summary>
        /// Get Player ID
        /// </summary>
        /// <remarks>
        /// Get a Player&#x27;s ID via their Unique ID
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">Player&#x27;s Unique ID</param>
        /// <returns>Task of SDPlayerGetIdResponse</returns>
        System.Threading.Tasks.Task<SDPlayerGetIdResponse> PlayerGetIdGetAsync (string uniqueId);

        /// <summary>
        /// Get Player ID
        /// </summary>
        /// <remarks>
        /// Get a Player&#x27;s ID via their Unique ID
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">Player&#x27;s Unique ID</param>
        /// <returns>Task of ApiResponse (SDPlayerGetIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SDPlayerGetIdResponse>> PlayerGetIdGetAsyncWithHttpInfo (string uniqueId);
        /// <summary>
        /// Get All Player IDs
        /// </summary>
        /// <remarks>
        /// Get All Player IDs for a Given Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SDPlayerGetIdsResponses</returns>
        System.Threading.Tasks.Task<SDPlayerGetIdsResponses> PlayerGetIdsGetAsync ();

        /// <summary>
        /// Get All Player IDs
        /// </summary>
        /// <remarks>
        /// Get All Player IDs for a Given Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SDPlayerGetIdsResponses)</returns>
        System.Threading.Tasks.Task<ApiResponse<SDPlayerGetIdsResponses>> PlayerGetIdsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Get Player Inventory
        /// </summary>
        /// <remarks>
        /// Get a players inventory and all the items it holds
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <param name="start">position in list (optional)</param>
        /// <param name="tokenIds">Comma-Separated String of token ids (ex. &#x27;3589, 3580&#x27;) (optional)</param>
        /// <param name="limit">maximum items returned in list (optional)</param>
        /// <returns>Task of SDPlayerGetInventoryResponses</returns>
        System.Threading.Tasks.Task<SDPlayerGetInventoryResponses> PlayerGetInventoryGetAsync (string playerId, string start = null, string tokenIds = null, string limit = null);

        /// <summary>
        /// Get Player Inventory
        /// </summary>
        /// <remarks>
        /// Get a players inventory and all the items it holds
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <param name="start">position in list (optional)</param>
        /// <param name="tokenIds">Comma-Separated String of token ids (ex. &#x27;3589, 3580&#x27;) (optional)</param>
        /// <param name="limit">maximum items returned in list (optional)</param>
        /// <returns>Task of ApiResponse (SDPlayerGetInventoryResponses)</returns>
        System.Threading.Tasks.Task<ApiResponse<SDPlayerGetInventoryResponses>> PlayerGetInventoryGetAsyncWithHttpInfo (string playerId, string start = null, string tokenIds = null, string limit = null);
        /// <summary>
        /// Mutate Player
        /// </summary>
        /// <remarks>
        /// Change player data
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> PlayerMutatePutAsync (SDPlayerMutateRequest body);

        /// <summary>
        /// Mutate Player
        /// </summary>
        /// <remarks>
        /// Change player data
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> PlayerMutatePutAsyncWithHttpInfo (SDPlayerMutateRequest body);
        /// <summary>
        /// Remove Player
        /// </summary>
        /// <remarks>
        /// Removes (hides) a player from your game. This is not permanent.
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player Id returned from player/create a UUID, i.e. 802760b0-2bb5-4fba-9237-895ed02cf8d8</param>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> PlayerRemoveDeleteAsync (string playerId);

        /// <summary>
        /// Remove Player
        /// </summary>
        /// <remarks>
        /// Removes (hides) a player from your game. This is not permanent.
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player Id returned from player/create a UUID, i.e. 802760b0-2bb5-4fba-9237-895ed02cf8d8</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> PlayerRemoveDeleteAsyncWithHttpInfo (string playerId);
        /// <summary>
        /// Get Player Wallet
        /// </summary>
        /// <remarks>
        /// Get player&#x27;s wallet within a game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <returns>Task of SDPlayerWalletGetResponse</returns>
        System.Threading.Tasks.Task<SDPlayerWalletGetResponse> PlayerWalletGetGetAsync (string playerId);

        /// <summary>
        /// Get Player Wallet
        /// </summary>
        /// <remarks>
        /// Get player&#x27;s wallet within a game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <returns>Task of ApiResponse (SDPlayerWalletGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SDPlayerWalletGetResponse>> PlayerWalletGetGetAsyncWithHttpInfo (string playerId);
        /// <summary>
        /// Withdraw From Player
        /// </summary>
        /// <remarks>
        /// Withdraw a Player&#x27;s Tokens from their Stardust Wallet
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> PlayerWithdrawPostAsync (SDPlayerWithdrawRequest body);

        /// <summary>
        /// Withdraw From Player
        /// </summary>
        /// <remarks>
        /// Withdraw a Player&#x27;s Tokens from their Stardust Wallet
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> PlayerWithdrawPostAsyncWithHttpInfo (SDPlayerWithdrawRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class PlayerEndpointsApi : IPlayerEndpointsApi
    {
        private Stardust.CoreSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerEndpointsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlayerEndpointsApi(String basePath)
        {
            this.Configuration = new Stardust.CoreSDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Stardust.CoreSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerEndpointsApi"/> class
        /// </summary>
        /// <returns></returns>
        public PlayerEndpointsApi()
        {
            this.Configuration = Stardust.CoreSDK.Client.Configuration.Default;

            ExceptionFactory = Stardust.CoreSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerEndpointsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlayerEndpointsApi(Stardust.CoreSDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Stardust.CoreSDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Stardust.CoreSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Stardust.CoreSDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Stardust.CoreSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Player Count Get Player count within a game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SDPlayerCountResponse</returns>
        public SDPlayerCountResponse PlayerCountGet ()
        {
             ApiResponse<SDPlayerCountResponse> localVarResponse = PlayerCountGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Player Count Get Player count within a game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SDPlayerCountResponse</returns>
        public ApiResponse< SDPlayerCountResponse > PlayerCountGetWithHttpInfo ()
        {

            var localVarPath = "./player/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDPlayerCountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDPlayerCountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDPlayerCountResponse)));
        }

        /// <summary>
        /// Get Player Count Get Player count within a game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SDPlayerCountResponse</returns>
        public async System.Threading.Tasks.Task<SDPlayerCountResponse> PlayerCountGetAsync ()
        {
             ApiResponse<SDPlayerCountResponse> localVarResponse = await PlayerCountGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Player Count Get Player count within a game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SDPlayerCountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SDPlayerCountResponse>> PlayerCountGetAsyncWithHttpInfo ()
        {

            var localVarPath = "./player/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDPlayerCountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDPlayerCountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDPlayerCountResponse)));
        }

        /// <summary>
        /// Create Player Create a Player for a game. Returns their player id which can be used to reference them later in Stardust&#x27;s system
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SDPlayerCreateResponse</returns>
        public SDPlayerCreateResponse PlayerCreatePost (SDPlayerCreateRequest body)
        {
             ApiResponse<SDPlayerCreateResponse> localVarResponse = PlayerCreatePostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Player Create a Player for a game. Returns their player id which can be used to reference them later in Stardust&#x27;s system
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SDPlayerCreateResponse</returns>
        public ApiResponse< SDPlayerCreateResponse > PlayerCreatePostWithHttpInfo (SDPlayerCreateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PlayerEndpointsApi->PlayerCreatePost");

            var localVarPath = "./player/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDPlayerCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDPlayerCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDPlayerCreateResponse)));
        }

        /// <summary>
        /// Create Player Create a Player for a game. Returns their player id which can be used to reference them later in Stardust&#x27;s system
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SDPlayerCreateResponse</returns>
        public async System.Threading.Tasks.Task<SDPlayerCreateResponse> PlayerCreatePostAsync (SDPlayerCreateRequest body)
        {
             ApiResponse<SDPlayerCreateResponse> localVarResponse = await PlayerCreatePostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Player Create a Player for a game. Returns their player id which can be used to reference them later in Stardust&#x27;s system
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SDPlayerCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SDPlayerCreateResponse>> PlayerCreatePostAsyncWithHttpInfo (SDPlayerCreateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PlayerEndpointsApi->PlayerCreatePost");

            var localVarPath = "./player/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDPlayerCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDPlayerCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDPlayerCreateResponse)));
        }

        /// <summary>
        /// Get All Players Get the List of All Players in Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">position in list (optional)</param>
        /// <param name="filter">Find a substring within the Player unique ID field (optional)</param>
        /// <param name="limit">maximum items returned in list (optional)</param>
        /// <returns>SDPlayerGetAllResponses</returns>
        public SDPlayerGetAllResponses PlayerGetAllGet (string start = null, string filter = null, string limit = null)
        {
             ApiResponse<SDPlayerGetAllResponses> localVarResponse = PlayerGetAllGetWithHttpInfo(start, filter, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Players Get the List of All Players in Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">position in list (optional)</param>
        /// <param name="filter">Find a substring within the Player unique ID field (optional)</param>
        /// <param name="limit">maximum items returned in list (optional)</param>
        /// <returns>ApiResponse of SDPlayerGetAllResponses</returns>
        public ApiResponse< SDPlayerGetAllResponses > PlayerGetAllGetWithHttpInfo (string start = null, string filter = null, string limit = null)
        {

            var localVarPath = "./player/get-all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerGetAllGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDPlayerGetAllResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDPlayerGetAllResponses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDPlayerGetAllResponses)));
        }

        /// <summary>
        /// Get All Players Get the List of All Players in Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">position in list (optional)</param>
        /// <param name="filter">Find a substring within the Player unique ID field (optional)</param>
        /// <param name="limit">maximum items returned in list (optional)</param>
        /// <returns>Task of SDPlayerGetAllResponses</returns>
        public async System.Threading.Tasks.Task<SDPlayerGetAllResponses> PlayerGetAllGetAsync (string start = null, string filter = null, string limit = null)
        {
             ApiResponse<SDPlayerGetAllResponses> localVarResponse = await PlayerGetAllGetAsyncWithHttpInfo(start, filter, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Players Get the List of All Players in Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">position in list (optional)</param>
        /// <param name="filter">Find a substring within the Player unique ID field (optional)</param>
        /// <param name="limit">maximum items returned in list (optional)</param>
        /// <returns>Task of ApiResponse (SDPlayerGetAllResponses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SDPlayerGetAllResponses>> PlayerGetAllGetAsyncWithHttpInfo (string start = null, string filter = null, string limit = null)
        {

            var localVarPath = "./player/get-all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerGetAllGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDPlayerGetAllResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDPlayerGetAllResponses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDPlayerGetAllResponses)));
        }

        /// <summary>
        /// Get Player Get Details of a Player Within a Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <returns>SDPlayerGetResponse</returns>
        public SDPlayerGetResponse PlayerGetGet (string playerId)
        {
             ApiResponse<SDPlayerGetResponse> localVarResponse = PlayerGetGetWithHttpInfo(playerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Player Get Details of a Player Within a Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <returns>ApiResponse of SDPlayerGetResponse</returns>
        public ApiResponse< SDPlayerGetResponse > PlayerGetGetWithHttpInfo (string playerId)
        {
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling PlayerEndpointsApi->PlayerGetGet");

            var localVarPath = "./player/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playerId", playerId)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerGetGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDPlayerGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDPlayerGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDPlayerGetResponse)));
        }

        /// <summary>
        /// Get Player Get Details of a Player Within a Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <returns>Task of SDPlayerGetResponse</returns>
        public async System.Threading.Tasks.Task<SDPlayerGetResponse> PlayerGetGetAsync (string playerId)
        {
             ApiResponse<SDPlayerGetResponse> localVarResponse = await PlayerGetGetAsyncWithHttpInfo(playerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Player Get Details of a Player Within a Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <returns>Task of ApiResponse (SDPlayerGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SDPlayerGetResponse>> PlayerGetGetAsyncWithHttpInfo (string playerId)
        {
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling PlayerEndpointsApi->PlayerGetGet");

            var localVarPath = "./player/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playerId", playerId)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerGetGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDPlayerGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDPlayerGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDPlayerGetResponse)));
        }

        /// <summary>
        /// Get Player ID Get a Player&#x27;s ID via their Unique ID
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">Player&#x27;s Unique ID</param>
        /// <returns>SDPlayerGetIdResponse</returns>
        public SDPlayerGetIdResponse PlayerGetIdGet (string uniqueId)
        {
             ApiResponse<SDPlayerGetIdResponse> localVarResponse = PlayerGetIdGetWithHttpInfo(uniqueId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Player ID Get a Player&#x27;s ID via their Unique ID
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">Player&#x27;s Unique ID</param>
        /// <returns>ApiResponse of SDPlayerGetIdResponse</returns>
        public ApiResponse< SDPlayerGetIdResponse > PlayerGetIdGetWithHttpInfo (string uniqueId)
        {
            // verify the required parameter 'uniqueId' is set
            if (uniqueId == null)
                throw new ApiException(400, "Missing required parameter 'uniqueId' when calling PlayerEndpointsApi->PlayerGetIdGet");

            var localVarPath = "./player/get-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uniqueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uniqueId", uniqueId)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerGetIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDPlayerGetIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDPlayerGetIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDPlayerGetIdResponse)));
        }

        /// <summary>
        /// Get Player ID Get a Player&#x27;s ID via their Unique ID
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">Player&#x27;s Unique ID</param>
        /// <returns>Task of SDPlayerGetIdResponse</returns>
        public async System.Threading.Tasks.Task<SDPlayerGetIdResponse> PlayerGetIdGetAsync (string uniqueId)
        {
             ApiResponse<SDPlayerGetIdResponse> localVarResponse = await PlayerGetIdGetAsyncWithHttpInfo(uniqueId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Player ID Get a Player&#x27;s ID via their Unique ID
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uniqueId">Player&#x27;s Unique ID</param>
        /// <returns>Task of ApiResponse (SDPlayerGetIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SDPlayerGetIdResponse>> PlayerGetIdGetAsyncWithHttpInfo (string uniqueId)
        {
            // verify the required parameter 'uniqueId' is set
            if (uniqueId == null)
                throw new ApiException(400, "Missing required parameter 'uniqueId' when calling PlayerEndpointsApi->PlayerGetIdGet");

            var localVarPath = "./player/get-id";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uniqueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uniqueId", uniqueId)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerGetIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDPlayerGetIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDPlayerGetIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDPlayerGetIdResponse)));
        }

        /// <summary>
        /// Get All Player IDs Get All Player IDs for a Given Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SDPlayerGetIdsResponses</returns>
        public SDPlayerGetIdsResponses PlayerGetIdsGet ()
        {
             ApiResponse<SDPlayerGetIdsResponses> localVarResponse = PlayerGetIdsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Player IDs Get All Player IDs for a Given Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SDPlayerGetIdsResponses</returns>
        public ApiResponse< SDPlayerGetIdsResponses > PlayerGetIdsGetWithHttpInfo ()
        {

            var localVarPath = "./player/get-ids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerGetIdsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDPlayerGetIdsResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDPlayerGetIdsResponses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDPlayerGetIdsResponses)));
        }

        /// <summary>
        /// Get All Player IDs Get All Player IDs for a Given Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SDPlayerGetIdsResponses</returns>
        public async System.Threading.Tasks.Task<SDPlayerGetIdsResponses> PlayerGetIdsGetAsync ()
        {
             ApiResponse<SDPlayerGetIdsResponses> localVarResponse = await PlayerGetIdsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Player IDs Get All Player IDs for a Given Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SDPlayerGetIdsResponses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SDPlayerGetIdsResponses>> PlayerGetIdsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "./player/get-ids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerGetIdsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDPlayerGetIdsResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDPlayerGetIdsResponses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDPlayerGetIdsResponses)));
        }

        /// <summary>
        /// Get Player Inventory Get a players inventory and all the items it holds
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <param name="start">position in list (optional)</param>
        /// <param name="tokenIds">Comma-Separated String of token ids (ex. &#x27;3589, 3580&#x27;) (optional)</param>
        /// <param name="limit">maximum items returned in list (optional)</param>
        /// <returns>SDPlayerGetInventoryResponses</returns>
        public SDPlayerGetInventoryResponses PlayerGetInventoryGet (string playerId, string start = null, string tokenIds = null, string limit = null)
        {
             ApiResponse<SDPlayerGetInventoryResponses> localVarResponse = PlayerGetInventoryGetWithHttpInfo(playerId, start, tokenIds, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Player Inventory Get a players inventory and all the items it holds
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <param name="start">position in list (optional)</param>
        /// <param name="tokenIds">Comma-Separated String of token ids (ex. &#x27;3589, 3580&#x27;) (optional)</param>
        /// <param name="limit">maximum items returned in list (optional)</param>
        /// <returns>ApiResponse of SDPlayerGetInventoryResponses</returns>
        public ApiResponse< SDPlayerGetInventoryResponses > PlayerGetInventoryGetWithHttpInfo (string playerId, string start = null, string tokenIds = null, string limit = null)
        {
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling PlayerEndpointsApi->PlayerGetInventoryGet");

            var localVarPath = "./player/get-inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (tokenIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tokenIds", tokenIds)); // query parameter
            if (playerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playerId", playerId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerGetInventoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDPlayerGetInventoryResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDPlayerGetInventoryResponses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDPlayerGetInventoryResponses)));
        }

        /// <summary>
        /// Get Player Inventory Get a players inventory and all the items it holds
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <param name="start">position in list (optional)</param>
        /// <param name="tokenIds">Comma-Separated String of token ids (ex. &#x27;3589, 3580&#x27;) (optional)</param>
        /// <param name="limit">maximum items returned in list (optional)</param>
        /// <returns>Task of SDPlayerGetInventoryResponses</returns>
        public async System.Threading.Tasks.Task<SDPlayerGetInventoryResponses> PlayerGetInventoryGetAsync (string playerId, string start = null, string tokenIds = null, string limit = null)
        {
             ApiResponse<SDPlayerGetInventoryResponses> localVarResponse = await PlayerGetInventoryGetAsyncWithHttpInfo(playerId, start, tokenIds, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Player Inventory Get a players inventory and all the items it holds
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <param name="start">position in list (optional)</param>
        /// <param name="tokenIds">Comma-Separated String of token ids (ex. &#x27;3589, 3580&#x27;) (optional)</param>
        /// <param name="limit">maximum items returned in list (optional)</param>
        /// <returns>Task of ApiResponse (SDPlayerGetInventoryResponses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SDPlayerGetInventoryResponses>> PlayerGetInventoryGetAsyncWithHttpInfo (string playerId, string start = null, string tokenIds = null, string limit = null)
        {
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling PlayerEndpointsApi->PlayerGetInventoryGet");

            var localVarPath = "./player/get-inventory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (tokenIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tokenIds", tokenIds)); // query parameter
            if (playerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playerId", playerId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerGetInventoryGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDPlayerGetInventoryResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDPlayerGetInventoryResponses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDPlayerGetInventoryResponses)));
        }

        /// <summary>
        /// Mutate Player Change player data
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Empty</returns>
        public Empty PlayerMutatePut (SDPlayerMutateRequest body)
        {
             ApiResponse<Empty> localVarResponse = PlayerMutatePutWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mutate Player Change player data
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > PlayerMutatePutWithHttpInfo (SDPlayerMutateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PlayerEndpointsApi->PlayerMutatePut");

            var localVarPath = "./player/mutate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerMutatePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Mutate Player Change player data
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> PlayerMutatePutAsync (SDPlayerMutateRequest body)
        {
             ApiResponse<Empty> localVarResponse = await PlayerMutatePutAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mutate Player Change player data
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> PlayerMutatePutAsyncWithHttpInfo (SDPlayerMutateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PlayerEndpointsApi->PlayerMutatePut");

            var localVarPath = "./player/mutate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerMutatePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Remove Player Removes (hides) a player from your game. This is not permanent.
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player Id returned from player/create a UUID, i.e. 802760b0-2bb5-4fba-9237-895ed02cf8d8</param>
        /// <returns>Empty</returns>
        public Empty PlayerRemoveDelete (string playerId)
        {
             ApiResponse<Empty> localVarResponse = PlayerRemoveDeleteWithHttpInfo(playerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Player Removes (hides) a player from your game. This is not permanent.
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player Id returned from player/create a UUID, i.e. 802760b0-2bb5-4fba-9237-895ed02cf8d8</param>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > PlayerRemoveDeleteWithHttpInfo (string playerId)
        {
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling PlayerEndpointsApi->PlayerRemoveDelete");

            var localVarPath = "./player/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playerId", playerId)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerRemoveDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Remove Player Removes (hides) a player from your game. This is not permanent.
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player Id returned from player/create a UUID, i.e. 802760b0-2bb5-4fba-9237-895ed02cf8d8</param>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> PlayerRemoveDeleteAsync (string playerId)
        {
             ApiResponse<Empty> localVarResponse = await PlayerRemoveDeleteAsyncWithHttpInfo(playerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove Player Removes (hides) a player from your game. This is not permanent.
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player Id returned from player/create a UUID, i.e. 802760b0-2bb5-4fba-9237-895ed02cf8d8</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> PlayerRemoveDeleteAsyncWithHttpInfo (string playerId)
        {
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling PlayerEndpointsApi->PlayerRemoveDelete");

            var localVarPath = "./player/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playerId", playerId)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerRemoveDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Get Player Wallet Get player&#x27;s wallet within a game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <returns>SDPlayerWalletGetResponse</returns>
        public SDPlayerWalletGetResponse PlayerWalletGetGet (string playerId)
        {
             ApiResponse<SDPlayerWalletGetResponse> localVarResponse = PlayerWalletGetGetWithHttpInfo(playerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Player Wallet Get player&#x27;s wallet within a game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <returns>ApiResponse of SDPlayerWalletGetResponse</returns>
        public ApiResponse< SDPlayerWalletGetResponse > PlayerWalletGetGetWithHttpInfo (string playerId)
        {
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling PlayerEndpointsApi->PlayerWalletGetGet");

            var localVarPath = "./player/wallet-get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playerId", playerId)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerWalletGetGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDPlayerWalletGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDPlayerWalletGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDPlayerWalletGetResponse)));
        }

        /// <summary>
        /// Get Player Wallet Get player&#x27;s wallet within a game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <returns>Task of SDPlayerWalletGetResponse</returns>
        public async System.Threading.Tasks.Task<SDPlayerWalletGetResponse> PlayerWalletGetGetAsync (string playerId)
        {
             ApiResponse<SDPlayerWalletGetResponse> localVarResponse = await PlayerWalletGetGetAsyncWithHttpInfo(playerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Player Wallet Get player&#x27;s wallet within a game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player id</param>
        /// <returns>Task of ApiResponse (SDPlayerWalletGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SDPlayerWalletGetResponse>> PlayerWalletGetGetAsyncWithHttpInfo (string playerId)
        {
            // verify the required parameter 'playerId' is set
            if (playerId == null)
                throw new ApiException(400, "Missing required parameter 'playerId' when calling PlayerEndpointsApi->PlayerWalletGetGet");

            var localVarPath = "./player/wallet-get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (playerId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "playerId", playerId)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerWalletGetGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDPlayerWalletGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDPlayerWalletGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDPlayerWalletGetResponse)));
        }

        /// <summary>
        /// Withdraw From Player Withdraw a Player&#x27;s Tokens from their Stardust Wallet
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Empty</returns>
        public Empty PlayerWithdrawPost (SDPlayerWithdrawRequest body)
        {
             ApiResponse<Empty> localVarResponse = PlayerWithdrawPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Withdraw From Player Withdraw a Player&#x27;s Tokens from their Stardust Wallet
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > PlayerWithdrawPostWithHttpInfo (SDPlayerWithdrawRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PlayerEndpointsApi->PlayerWithdrawPost");

            var localVarPath = "./player/withdraw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerWithdrawPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Withdraw From Player Withdraw a Player&#x27;s Tokens from their Stardust Wallet
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> PlayerWithdrawPostAsync (SDPlayerWithdrawRequest body)
        {
             ApiResponse<Empty> localVarResponse = await PlayerWithdrawPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Withdraw From Player Withdraw a Player&#x27;s Tokens from their Stardust Wallet
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> PlayerWithdrawPostAsyncWithHttpInfo (SDPlayerWithdrawRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PlayerEndpointsApi->PlayerWithdrawPost");

            var localVarPath = "./player/withdraw";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlayerWithdrawPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

    }
}
