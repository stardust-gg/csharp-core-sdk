/* 
 * Stardust API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-22T22:32:07Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Stardust.CoreSDK.Client;
using Stardust.CoreSDK.Model;

namespace Stardust.CoreSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ITemplateEndpointsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Template Count
        /// </summary>
        /// <remarks>
        /// Get a Template&#x27;s Count Within a Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Find a substring within the Template name field (optional)</param>
        /// <returns>SDTemplateCountResponse</returns>
        SDTemplateCountResponse TemplateCountGet (string filter = null);

        /// <summary>
        /// Get Template Count
        /// </summary>
        /// <remarks>
        /// Get a Template&#x27;s Count Within a Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Find a substring within the Template name field (optional)</param>
        /// <returns>ApiResponse of SDTemplateCountResponse</returns>
        ApiResponse<SDTemplateCountResponse> TemplateCountGetWithHttpInfo (string filter = null);
        /// <summary>
        /// Create Template
        /// </summary>
        /// <remarks>
        /// Adds a New Token Template that lets Players Acquire that Token using the Token/Mint Endpoint
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SDTemplateCreateResponse</returns>
        SDTemplateCreateResponse TemplateCreatePost (SDTemplateCreateRequest body);

        /// <summary>
        /// Create Template
        /// </summary>
        /// <remarks>
        /// Adds a New Token Template that lets Players Acquire that Token using the Token/Mint Endpoint
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SDTemplateCreateResponse</returns>
        ApiResponse<SDTemplateCreateResponse> TemplateCreatePostWithHttpInfo (SDTemplateCreateRequest body);
        /// <summary>
        /// Get All Templates
        /// </summary>
        /// <remarks>
        /// Get All of the Templates Within a Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">position in list</param>
        /// <param name="limit">maximum templates returned in list</param>
        /// <param name="filter">Find a substring within the Template name field (optional)</param>
        /// <returns>SDTemplateGetAllResponses</returns>
        SDTemplateGetAllResponses TemplateGetAllGet (string start, string limit, string filter = null);

        /// <summary>
        /// Get All Templates
        /// </summary>
        /// <remarks>
        /// Get All of the Templates Within a Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">position in list</param>
        /// <param name="limit">maximum templates returned in list</param>
        /// <param name="filter">Find a substring within the Template name field (optional)</param>
        /// <returns>ApiResponse of SDTemplateGetAllResponses</returns>
        ApiResponse<SDTemplateGetAllResponses> TemplateGetAllGetWithHttpInfo (string start, string limit, string filter = null);
        /// <summary>
        /// Get Template
        /// </summary>
        /// <remarks>
        /// Get the Details of a Template
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id such as 3589)</param>
        /// <returns>SDTemplateGetResponse</returns>
        SDTemplateGetResponse TemplateGetGet (string templateId);

        /// <summary>
        /// Get Template
        /// </summary>
        /// <remarks>
        /// Get the Details of a Template
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id such as 3589)</param>
        /// <returns>ApiResponse of SDTemplateGetResponse</returns>
        ApiResponse<SDTemplateGetResponse> TemplateGetGetWithHttpInfo (string templateId);
        /// <summary>
        /// Get Template Tokens
        /// </summary>
        /// <remarks>
        /// Get a List of All Minted Tokens from a Given Template
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the Template</param>
        /// <param name="start">position in list (optional)</param>
        /// <param name="limit">maximum templates returned in list (optional)</param>
        /// <param name="includeDeleted">If true tokens from deleted players are included in the response (optional)</param>
        /// <returns>SDTemplateGetTokensResponses</returns>
        SDTemplateGetTokensResponses TemplateGetTokensGet (string templateId, string start = null, string limit = null, string includeDeleted = null);

        /// <summary>
        /// Get Template Tokens
        /// </summary>
        /// <remarks>
        /// Get a List of All Minted Tokens from a Given Template
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the Template</param>
        /// <param name="start">position in list (optional)</param>
        /// <param name="limit">maximum templates returned in list (optional)</param>
        /// <param name="includeDeleted">If true tokens from deleted players are included in the response (optional)</param>
        /// <returns>ApiResponse of SDTemplateGetTokensResponses</returns>
        ApiResponse<SDTemplateGetTokensResponses> TemplateGetTokensGetWithHttpInfo (string templateId, string start = null, string limit = null, string includeDeleted = null);
        /// <summary>
        /// Mutate Template
        /// </summary>
        /// <remarks>
        /// Mutates a Property of a Template, Which in Turn will Affect the Inherited Property on All of the Tokens Created from this Template (via token/mint)
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Empty</returns>
        Empty TemplateMutatePut (SDTemplateMutateRequest body);

        /// <summary>
        /// Mutate Template
        /// </summary>
        /// <remarks>
        /// Mutates a Property of a Template, Which in Turn will Affect the Inherited Property on All of the Tokens Created from this Template (via token/mint)
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> TemplateMutatePutWithHttpInfo (SDTemplateMutateRequest body);
        /// <summary>
        /// Remove Template Property
        /// </summary>
        /// <remarks>
        /// Removes a Templates Property from Your Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id returned from template/create (ex. 5)</param>
        /// <param name="props">Stringify Array of template mutable property names ex: &#x27;[\&quot;exp\&quot;, \&quot;health\&quot;]&#x27; }</param>
        /// <returns>Empty</returns>
        Empty TemplatePropsRemoveDelete (string templateId, string props);

        /// <summary>
        /// Remove Template Property
        /// </summary>
        /// <remarks>
        /// Removes a Templates Property from Your Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id returned from template/create (ex. 5)</param>
        /// <param name="props">Stringify Array of template mutable property names ex: &#x27;[\&quot;exp\&quot;, \&quot;health\&quot;]&#x27; }</param>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> TemplatePropsRemoveDeleteWithHttpInfo (string templateId, string props);
        /// <summary>
        /// Remove Template
        /// </summary>
        /// <remarks>
        /// Removes a Template from Your Game. If Players have Instances of this Template from the token/mint Command, Their Tokens will NOT be Removed
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id returned from template/create (ex. 5)</param>
        /// <returns>Empty</returns>
        Empty TemplateRemoveDelete (string templateId);

        /// <summary>
        /// Remove Template
        /// </summary>
        /// <remarks>
        /// Removes a Template from Your Game. If Players have Instances of this Template from the token/mint Command, Their Tokens will NOT be Removed
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id returned from template/create (ex. 5)</param>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> TemplateRemoveDeleteWithHttpInfo (string templateId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Template Count
        /// </summary>
        /// <remarks>
        /// Get a Template&#x27;s Count Within a Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Find a substring within the Template name field (optional)</param>
        /// <returns>Task of SDTemplateCountResponse</returns>
        System.Threading.Tasks.Task<SDTemplateCountResponse> TemplateCountGetAsync (string filter = null);

        /// <summary>
        /// Get Template Count
        /// </summary>
        /// <remarks>
        /// Get a Template&#x27;s Count Within a Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Find a substring within the Template name field (optional)</param>
        /// <returns>Task of ApiResponse (SDTemplateCountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SDTemplateCountResponse>> TemplateCountGetAsyncWithHttpInfo (string filter = null);
        /// <summary>
        /// Create Template
        /// </summary>
        /// <remarks>
        /// Adds a New Token Template that lets Players Acquire that Token using the Token/Mint Endpoint
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SDTemplateCreateResponse</returns>
        System.Threading.Tasks.Task<SDTemplateCreateResponse> TemplateCreatePostAsync (SDTemplateCreateRequest body);

        /// <summary>
        /// Create Template
        /// </summary>
        /// <remarks>
        /// Adds a New Token Template that lets Players Acquire that Token using the Token/Mint Endpoint
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SDTemplateCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SDTemplateCreateResponse>> TemplateCreatePostAsyncWithHttpInfo (SDTemplateCreateRequest body);
        /// <summary>
        /// Get All Templates
        /// </summary>
        /// <remarks>
        /// Get All of the Templates Within a Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">position in list</param>
        /// <param name="limit">maximum templates returned in list</param>
        /// <param name="filter">Find a substring within the Template name field (optional)</param>
        /// <returns>Task of SDTemplateGetAllResponses</returns>
        System.Threading.Tasks.Task<SDTemplateGetAllResponses> TemplateGetAllGetAsync (string start, string limit, string filter = null);

        /// <summary>
        /// Get All Templates
        /// </summary>
        /// <remarks>
        /// Get All of the Templates Within a Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">position in list</param>
        /// <param name="limit">maximum templates returned in list</param>
        /// <param name="filter">Find a substring within the Template name field (optional)</param>
        /// <returns>Task of ApiResponse (SDTemplateGetAllResponses)</returns>
        System.Threading.Tasks.Task<ApiResponse<SDTemplateGetAllResponses>> TemplateGetAllGetAsyncWithHttpInfo (string start, string limit, string filter = null);
        /// <summary>
        /// Get Template
        /// </summary>
        /// <remarks>
        /// Get the Details of a Template
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id such as 3589)</param>
        /// <returns>Task of SDTemplateGetResponse</returns>
        System.Threading.Tasks.Task<SDTemplateGetResponse> TemplateGetGetAsync (string templateId);

        /// <summary>
        /// Get Template
        /// </summary>
        /// <remarks>
        /// Get the Details of a Template
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id such as 3589)</param>
        /// <returns>Task of ApiResponse (SDTemplateGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SDTemplateGetResponse>> TemplateGetGetAsyncWithHttpInfo (string templateId);
        /// <summary>
        /// Get Template Tokens
        /// </summary>
        /// <remarks>
        /// Get a List of All Minted Tokens from a Given Template
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the Template</param>
        /// <param name="start">position in list (optional)</param>
        /// <param name="limit">maximum templates returned in list (optional)</param>
        /// <param name="includeDeleted">If true tokens from deleted players are included in the response (optional)</param>
        /// <returns>Task of SDTemplateGetTokensResponses</returns>
        System.Threading.Tasks.Task<SDTemplateGetTokensResponses> TemplateGetTokensGetAsync (string templateId, string start = null, string limit = null, string includeDeleted = null);

        /// <summary>
        /// Get Template Tokens
        /// </summary>
        /// <remarks>
        /// Get a List of All Minted Tokens from a Given Template
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the Template</param>
        /// <param name="start">position in list (optional)</param>
        /// <param name="limit">maximum templates returned in list (optional)</param>
        /// <param name="includeDeleted">If true tokens from deleted players are included in the response (optional)</param>
        /// <returns>Task of ApiResponse (SDTemplateGetTokensResponses)</returns>
        System.Threading.Tasks.Task<ApiResponse<SDTemplateGetTokensResponses>> TemplateGetTokensGetAsyncWithHttpInfo (string templateId, string start = null, string limit = null, string includeDeleted = null);
        /// <summary>
        /// Mutate Template
        /// </summary>
        /// <remarks>
        /// Mutates a Property of a Template, Which in Turn will Affect the Inherited Property on All of the Tokens Created from this Template (via token/mint)
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> TemplateMutatePutAsync (SDTemplateMutateRequest body);

        /// <summary>
        /// Mutate Template
        /// </summary>
        /// <remarks>
        /// Mutates a Property of a Template, Which in Turn will Affect the Inherited Property on All of the Tokens Created from this Template (via token/mint)
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> TemplateMutatePutAsyncWithHttpInfo (SDTemplateMutateRequest body);
        /// <summary>
        /// Remove Template Property
        /// </summary>
        /// <remarks>
        /// Removes a Templates Property from Your Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id returned from template/create (ex. 5)</param>
        /// <param name="props">Stringify Array of template mutable property names ex: &#x27;[\&quot;exp\&quot;, \&quot;health\&quot;]&#x27; }</param>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> TemplatePropsRemoveDeleteAsync (string templateId, string props);

        /// <summary>
        /// Remove Template Property
        /// </summary>
        /// <remarks>
        /// Removes a Templates Property from Your Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id returned from template/create (ex. 5)</param>
        /// <param name="props">Stringify Array of template mutable property names ex: &#x27;[\&quot;exp\&quot;, \&quot;health\&quot;]&#x27; }</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> TemplatePropsRemoveDeleteAsyncWithHttpInfo (string templateId, string props);
        /// <summary>
        /// Remove Template
        /// </summary>
        /// <remarks>
        /// Removes a Template from Your Game. If Players have Instances of this Template from the token/mint Command, Their Tokens will NOT be Removed
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id returned from template/create (ex. 5)</param>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> TemplateRemoveDeleteAsync (string templateId);

        /// <summary>
        /// Remove Template
        /// </summary>
        /// <remarks>
        /// Removes a Template from Your Game. If Players have Instances of this Template from the token/mint Command, Their Tokens will NOT be Removed
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id returned from template/create (ex. 5)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> TemplateRemoveDeleteAsyncWithHttpInfo (string templateId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class TemplateEndpointsApi : ITemplateEndpointsApi
    {
        private Stardust.CoreSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateEndpointsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplateEndpointsApi(String basePath)
        {
            this.Configuration = new Stardust.CoreSDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Stardust.CoreSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateEndpointsApi"/> class
        /// </summary>
        /// <returns></returns>
        public TemplateEndpointsApi()
        {
            this.Configuration = Stardust.CoreSDK.Client.Configuration.Default;

            ExceptionFactory = Stardust.CoreSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateEndpointsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplateEndpointsApi(Stardust.CoreSDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Stardust.CoreSDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Stardust.CoreSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Stardust.CoreSDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Stardust.CoreSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Template Count Get a Template&#x27;s Count Within a Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Find a substring within the Template name field (optional)</param>
        /// <returns>SDTemplateCountResponse</returns>
        public SDTemplateCountResponse TemplateCountGet (string filter = null)
        {
             ApiResponse<SDTemplateCountResponse> localVarResponse = TemplateCountGetWithHttpInfo(filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Template Count Get a Template&#x27;s Count Within a Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Find a substring within the Template name field (optional)</param>
        /// <returns>ApiResponse of SDTemplateCountResponse</returns>
        public ApiResponse< SDTemplateCountResponse > TemplateCountGetWithHttpInfo (string filter = null)
        {

            var localVarPath = "./template/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplateCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDTemplateCountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDTemplateCountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDTemplateCountResponse)));
        }

        /// <summary>
        /// Get Template Count Get a Template&#x27;s Count Within a Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Find a substring within the Template name field (optional)</param>
        /// <returns>Task of SDTemplateCountResponse</returns>
        public async System.Threading.Tasks.Task<SDTemplateCountResponse> TemplateCountGetAsync (string filter = null)
        {
             ApiResponse<SDTemplateCountResponse> localVarResponse = await TemplateCountGetAsyncWithHttpInfo(filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Template Count Get a Template&#x27;s Count Within a Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Find a substring within the Template name field (optional)</param>
        /// <returns>Task of ApiResponse (SDTemplateCountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SDTemplateCountResponse>> TemplateCountGetAsyncWithHttpInfo (string filter = null)
        {

            var localVarPath = "./template/count";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplateCountGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDTemplateCountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDTemplateCountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDTemplateCountResponse)));
        }

        /// <summary>
        /// Create Template Adds a New Token Template that lets Players Acquire that Token using the Token/Mint Endpoint
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SDTemplateCreateResponse</returns>
        public SDTemplateCreateResponse TemplateCreatePost (SDTemplateCreateRequest body)
        {
             ApiResponse<SDTemplateCreateResponse> localVarResponse = TemplateCreatePostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Template Adds a New Token Template that lets Players Acquire that Token using the Token/Mint Endpoint
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SDTemplateCreateResponse</returns>
        public ApiResponse< SDTemplateCreateResponse > TemplateCreatePostWithHttpInfo (SDTemplateCreateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TemplateEndpointsApi->TemplateCreatePost");

            var localVarPath = "./template/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplateCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDTemplateCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDTemplateCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDTemplateCreateResponse)));
        }

        /// <summary>
        /// Create Template Adds a New Token Template that lets Players Acquire that Token using the Token/Mint Endpoint
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SDTemplateCreateResponse</returns>
        public async System.Threading.Tasks.Task<SDTemplateCreateResponse> TemplateCreatePostAsync (SDTemplateCreateRequest body)
        {
             ApiResponse<SDTemplateCreateResponse> localVarResponse = await TemplateCreatePostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Template Adds a New Token Template that lets Players Acquire that Token using the Token/Mint Endpoint
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SDTemplateCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SDTemplateCreateResponse>> TemplateCreatePostAsyncWithHttpInfo (SDTemplateCreateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TemplateEndpointsApi->TemplateCreatePost");

            var localVarPath = "./template/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplateCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDTemplateCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDTemplateCreateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDTemplateCreateResponse)));
        }

        /// <summary>
        /// Get All Templates Get All of the Templates Within a Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">position in list</param>
        /// <param name="limit">maximum templates returned in list</param>
        /// <param name="filter">Find a substring within the Template name field (optional)</param>
        /// <returns>SDTemplateGetAllResponses</returns>
        public SDTemplateGetAllResponses TemplateGetAllGet (string start, string limit, string filter = null)
        {
             ApiResponse<SDTemplateGetAllResponses> localVarResponse = TemplateGetAllGetWithHttpInfo(start, limit, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Templates Get All of the Templates Within a Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">position in list</param>
        /// <param name="limit">maximum templates returned in list</param>
        /// <param name="filter">Find a substring within the Template name field (optional)</param>
        /// <returns>ApiResponse of SDTemplateGetAllResponses</returns>
        public ApiResponse< SDTemplateGetAllResponses > TemplateGetAllGetWithHttpInfo (string start, string limit, string filter = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling TemplateEndpointsApi->TemplateGetAllGet");
            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new ApiException(400, "Missing required parameter 'limit' when calling TemplateEndpointsApi->TemplateGetAllGet");

            var localVarPath = "./template/get-all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplateGetAllGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDTemplateGetAllResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDTemplateGetAllResponses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDTemplateGetAllResponses)));
        }

        /// <summary>
        /// Get All Templates Get All of the Templates Within a Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">position in list</param>
        /// <param name="limit">maximum templates returned in list</param>
        /// <param name="filter">Find a substring within the Template name field (optional)</param>
        /// <returns>Task of SDTemplateGetAllResponses</returns>
        public async System.Threading.Tasks.Task<SDTemplateGetAllResponses> TemplateGetAllGetAsync (string start, string limit, string filter = null)
        {
             ApiResponse<SDTemplateGetAllResponses> localVarResponse = await TemplateGetAllGetAsyncWithHttpInfo(start, limit, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Templates Get All of the Templates Within a Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">position in list</param>
        /// <param name="limit">maximum templates returned in list</param>
        /// <param name="filter">Find a substring within the Template name field (optional)</param>
        /// <returns>Task of ApiResponse (SDTemplateGetAllResponses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SDTemplateGetAllResponses>> TemplateGetAllGetAsyncWithHttpInfo (string start, string limit, string filter = null)
        {
            // verify the required parameter 'start' is set
            if (start == null)
                throw new ApiException(400, "Missing required parameter 'start' when calling TemplateEndpointsApi->TemplateGetAllGet");
            // verify the required parameter 'limit' is set
            if (limit == null)
                throw new ApiException(400, "Missing required parameter 'limit' when calling TemplateEndpointsApi->TemplateGetAllGet");

            var localVarPath = "./template/get-all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplateGetAllGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDTemplateGetAllResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDTemplateGetAllResponses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDTemplateGetAllResponses)));
        }

        /// <summary>
        /// Get Template Get the Details of a Template
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id such as 3589)</param>
        /// <returns>SDTemplateGetResponse</returns>
        public SDTemplateGetResponse TemplateGetGet (string templateId)
        {
             ApiResponse<SDTemplateGetResponse> localVarResponse = TemplateGetGetWithHttpInfo(templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Template Get the Details of a Template
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id such as 3589)</param>
        /// <returns>ApiResponse of SDTemplateGetResponse</returns>
        public ApiResponse< SDTemplateGetResponse > TemplateGetGetWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateEndpointsApi->TemplateGetGet");

            var localVarPath = "./template/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplateGetGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDTemplateGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDTemplateGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDTemplateGetResponse)));
        }

        /// <summary>
        /// Get Template Get the Details of a Template
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id such as 3589)</param>
        /// <returns>Task of SDTemplateGetResponse</returns>
        public async System.Threading.Tasks.Task<SDTemplateGetResponse> TemplateGetGetAsync (string templateId)
        {
             ApiResponse<SDTemplateGetResponse> localVarResponse = await TemplateGetGetAsyncWithHttpInfo(templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Template Get the Details of a Template
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id such as 3589)</param>
        /// <returns>Task of ApiResponse (SDTemplateGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SDTemplateGetResponse>> TemplateGetGetAsyncWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateEndpointsApi->TemplateGetGet");

            var localVarPath = "./template/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplateGetGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDTemplateGetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDTemplateGetResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDTemplateGetResponse)));
        }

        /// <summary>
        /// Get Template Tokens Get a List of All Minted Tokens from a Given Template
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the Template</param>
        /// <param name="start">position in list (optional)</param>
        /// <param name="limit">maximum templates returned in list (optional)</param>
        /// <param name="includeDeleted">If true tokens from deleted players are included in the response (optional)</param>
        /// <returns>SDTemplateGetTokensResponses</returns>
        public SDTemplateGetTokensResponses TemplateGetTokensGet (string templateId, string start = null, string limit = null, string includeDeleted = null)
        {
             ApiResponse<SDTemplateGetTokensResponses> localVarResponse = TemplateGetTokensGetWithHttpInfo(templateId, start, limit, includeDeleted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Template Tokens Get a List of All Minted Tokens from a Given Template
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the Template</param>
        /// <param name="start">position in list (optional)</param>
        /// <param name="limit">maximum templates returned in list (optional)</param>
        /// <param name="includeDeleted">If true tokens from deleted players are included in the response (optional)</param>
        /// <returns>ApiResponse of SDTemplateGetTokensResponses</returns>
        public ApiResponse< SDTemplateGetTokensResponses > TemplateGetTokensGetWithHttpInfo (string templateId, string start = null, string limit = null, string includeDeleted = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateEndpointsApi->TemplateGetTokensGet");

            var localVarPath = "./template/get-tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplateGetTokensGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDTemplateGetTokensResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDTemplateGetTokensResponses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDTemplateGetTokensResponses)));
        }

        /// <summary>
        /// Get Template Tokens Get a List of All Minted Tokens from a Given Template
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the Template</param>
        /// <param name="start">position in list (optional)</param>
        /// <param name="limit">maximum templates returned in list (optional)</param>
        /// <param name="includeDeleted">If true tokens from deleted players are included in the response (optional)</param>
        /// <returns>Task of SDTemplateGetTokensResponses</returns>
        public async System.Threading.Tasks.Task<SDTemplateGetTokensResponses> TemplateGetTokensGetAsync (string templateId, string start = null, string limit = null, string includeDeleted = null)
        {
             ApiResponse<SDTemplateGetTokensResponses> localVarResponse = await TemplateGetTokensGetAsyncWithHttpInfo(templateId, start, limit, includeDeleted);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Template Tokens Get a List of All Minted Tokens from a Given Template
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">The ID of the Template</param>
        /// <param name="start">position in list (optional)</param>
        /// <param name="limit">maximum templates returned in list (optional)</param>
        /// <param name="includeDeleted">If true tokens from deleted players are included in the response (optional)</param>
        /// <returns>Task of ApiResponse (SDTemplateGetTokensResponses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SDTemplateGetTokensResponses>> TemplateGetTokensGetAsyncWithHttpInfo (string templateId, string start = null, string limit = null, string includeDeleted = null)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateEndpointsApi->TemplateGetTokensGet");

            var localVarPath = "./template/get-tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (start != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (includeDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDeleted", includeDeleted)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplateGetTokensGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDTemplateGetTokensResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDTemplateGetTokensResponses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDTemplateGetTokensResponses)));
        }

        /// <summary>
        /// Mutate Template Mutates a Property of a Template, Which in Turn will Affect the Inherited Property on All of the Tokens Created from this Template (via token/mint)
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Empty</returns>
        public Empty TemplateMutatePut (SDTemplateMutateRequest body)
        {
             ApiResponse<Empty> localVarResponse = TemplateMutatePutWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mutate Template Mutates a Property of a Template, Which in Turn will Affect the Inherited Property on All of the Tokens Created from this Template (via token/mint)
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > TemplateMutatePutWithHttpInfo (SDTemplateMutateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TemplateEndpointsApi->TemplateMutatePut");

            var localVarPath = "./template/mutate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplateMutatePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Mutate Template Mutates a Property of a Template, Which in Turn will Affect the Inherited Property on All of the Tokens Created from this Template (via token/mint)
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> TemplateMutatePutAsync (SDTemplateMutateRequest body)
        {
             ApiResponse<Empty> localVarResponse = await TemplateMutatePutAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mutate Template Mutates a Property of a Template, Which in Turn will Affect the Inherited Property on All of the Tokens Created from this Template (via token/mint)
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> TemplateMutatePutAsyncWithHttpInfo (SDTemplateMutateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TemplateEndpointsApi->TemplateMutatePut");

            var localVarPath = "./template/mutate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplateMutatePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Remove Template Property Removes a Templates Property from Your Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id returned from template/create (ex. 5)</param>
        /// <param name="props">Stringify Array of template mutable property names ex: &#x27;[\&quot;exp\&quot;, \&quot;health\&quot;]&#x27; }</param>
        /// <returns>Empty</returns>
        public Empty TemplatePropsRemoveDelete (string templateId, string props)
        {
             ApiResponse<Empty> localVarResponse = TemplatePropsRemoveDeleteWithHttpInfo(templateId, props);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Template Property Removes a Templates Property from Your Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id returned from template/create (ex. 5)</param>
        /// <param name="props">Stringify Array of template mutable property names ex: &#x27;[\&quot;exp\&quot;, \&quot;health\&quot;]&#x27; }</param>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > TemplatePropsRemoveDeleteWithHttpInfo (string templateId, string props)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateEndpointsApi->TemplatePropsRemoveDelete");
            // verify the required parameter 'props' is set
            if (props == null)
                throw new ApiException(400, "Missing required parameter 'props' when calling TemplateEndpointsApi->TemplatePropsRemoveDelete");

            var localVarPath = "./template/props-remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            if (props != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "props", props)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatePropsRemoveDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Remove Template Property Removes a Templates Property from Your Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id returned from template/create (ex. 5)</param>
        /// <param name="props">Stringify Array of template mutable property names ex: &#x27;[\&quot;exp\&quot;, \&quot;health\&quot;]&#x27; }</param>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> TemplatePropsRemoveDeleteAsync (string templateId, string props)
        {
             ApiResponse<Empty> localVarResponse = await TemplatePropsRemoveDeleteAsyncWithHttpInfo(templateId, props);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove Template Property Removes a Templates Property from Your Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id returned from template/create (ex. 5)</param>
        /// <param name="props">Stringify Array of template mutable property names ex: &#x27;[\&quot;exp\&quot;, \&quot;health\&quot;]&#x27; }</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> TemplatePropsRemoveDeleteAsyncWithHttpInfo (string templateId, string props)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateEndpointsApi->TemplatePropsRemoveDelete");
            // verify the required parameter 'props' is set
            if (props == null)
                throw new ApiException(400, "Missing required parameter 'props' when calling TemplateEndpointsApi->TemplatePropsRemoveDelete");

            var localVarPath = "./template/props-remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            if (props != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "props", props)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplatePropsRemoveDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Remove Template Removes a Template from Your Game. If Players have Instances of this Template from the token/mint Command, Their Tokens will NOT be Removed
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id returned from template/create (ex. 5)</param>
        /// <returns>Empty</returns>
        public Empty TemplateRemoveDelete (string templateId)
        {
             ApiResponse<Empty> localVarResponse = TemplateRemoveDeleteWithHttpInfo(templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Template Removes a Template from Your Game. If Players have Instances of this Template from the token/mint Command, Their Tokens will NOT be Removed
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id returned from template/create (ex. 5)</param>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > TemplateRemoveDeleteWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateEndpointsApi->TemplateRemoveDelete");

            var localVarPath = "./template/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplateRemoveDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Remove Template Removes a Template from Your Game. If Players have Instances of this Template from the token/mint Command, Their Tokens will NOT be Removed
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id returned from template/create (ex. 5)</param>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> TemplateRemoveDeleteAsync (string templateId)
        {
             ApiResponse<Empty> localVarResponse = await TemplateRemoveDeleteAsyncWithHttpInfo(templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove Template Removes a Template from Your Game. If Players have Instances of this Template from the token/mint Command, Their Tokens will NOT be Removed
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template Id returned from template/create (ex. 5)</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> TemplateRemoveDeleteAsyncWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new ApiException(400, "Missing required parameter 'templateId' when calling TemplateEndpointsApi->TemplateRemoveDelete");

            var localVarPath = "./template/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "templateId", templateId)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TemplateRemoveDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

    }
}
