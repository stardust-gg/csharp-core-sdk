/* 
 * Stardust API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2023-02-22T22:32:07Z
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using Stardust.CoreSDK.Client;
using Stardust.CoreSDK.Model;

namespace Stardust.CoreSDK.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ITokenEndpointsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Burn Token
        /// </summary>
        /// <remarks>
        /// Burns token on-chain. Cannot be reversed.
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Empty</returns>
        Empty TokenBurnPost (SDTokenBurnRequest body);

        /// <summary>
        /// Burn Token
        /// </summary>
        /// <remarks>
        /// Burns token on-chain. Cannot be reversed.
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> TokenBurnPostWithHttpInfo (SDTokenBurnRequest body);
        /// <summary>
        /// Get Token
        /// </summary>
        /// <remarks>
        /// Some of the details of this token are based upon the Template that it was created from (using token/mint)
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIds">Stringify Array of token ids (ex. &#x27;[3589, 3580]&#x27;)</param>
        /// <returns>SDTokenGetResponses</returns>
        SDTokenGetResponses TokenGetGet (string tokenIds);

        /// <summary>
        /// Get Token
        /// </summary>
        /// <remarks>
        /// Some of the details of this token are based upon the Template that it was created from (using token/mint)
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIds">Stringify Array of token ids (ex. &#x27;[3589, 3580]&#x27;)</param>
        /// <returns>ApiResponse of SDTokenGetResponses</returns>
        ApiResponse<SDTokenGetResponses> TokenGetGetWithHttpInfo (string tokenIds);
        /// <summary>
        /// Mint Tokens
        /// </summary>
        /// <remarks>
        /// Mint tokens to a player.
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SDTokenMintBulkResponses</returns>
        SDTokenMintBulkResponses TokenMintBulkPost (SDTokenMintBulkRequest body);

        /// <summary>
        /// Mint Tokens
        /// </summary>
        /// <remarks>
        /// Mint tokens to a player.
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SDTokenMintBulkResponses</returns>
        ApiResponse<SDTokenMintBulkResponses> TokenMintBulkPostWithHttpInfo (SDTokenMintBulkRequest body);
        /// <summary>
        /// Mutate Token
        /// </summary>
        /// <remarks>
        /// Mutates a Property of a Token
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Empty</returns>
        Empty TokenMutatePut (SDTokenMutateRequest body);

        /// <summary>
        /// Mutate Token
        /// </summary>
        /// <remarks>
        /// Mutates a Property of a Token
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> TokenMutatePutWithHttpInfo (SDTokenMutateRequest body);
        /// <summary>
        /// Remove Token Property
        /// </summary>
        /// <remarks>
        /// Removes a Tokens Property from Your Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Token Id returned from token/create (ex. 5)</param>
        /// <param name="props">Stringify Array of token mutable property names ex: &#x27;[\&quot;exp\&quot;, \&quot;health\&quot;]&#x27; }</param>
        /// <returns>Empty</returns>
        Empty TokenPropsRemoveDelete (string tokenId, string props);

        /// <summary>
        /// Remove Token Property
        /// </summary>
        /// <remarks>
        /// Removes a Tokens Property from Your Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Token Id returned from token/create (ex. 5)</param>
        /// <param name="props">Stringify Array of token mutable property names ex: &#x27;[\&quot;exp\&quot;, \&quot;health\&quot;]&#x27; }</param>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> TokenPropsRemoveDeleteWithHttpInfo (string tokenId, string props);
        /// <summary>
        /// Transfer Tokens
        /// </summary>
        /// <remarks>
        /// Use this Endpoint to Facilitate Moving Tokens from one Player to Another
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Empty</returns>
        Empty TokenTransferPost (SDTokenTransferRequest body);

        /// <summary>
        /// Transfer Tokens
        /// </summary>
        /// <remarks>
        /// Use this Endpoint to Facilitate Moving Tokens from one Player to Another
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Empty</returns>
        ApiResponse<Empty> TokenTransferPostWithHttpInfo (SDTokenTransferRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Burn Token
        /// </summary>
        /// <remarks>
        /// Burns token on-chain. Cannot be reversed.
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> TokenBurnPostAsync (SDTokenBurnRequest body);

        /// <summary>
        /// Burn Token
        /// </summary>
        /// <remarks>
        /// Burns token on-chain. Cannot be reversed.
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> TokenBurnPostAsyncWithHttpInfo (SDTokenBurnRequest body);
        /// <summary>
        /// Get Token
        /// </summary>
        /// <remarks>
        /// Some of the details of this token are based upon the Template that it was created from (using token/mint)
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIds">Stringify Array of token ids (ex. &#x27;[3589, 3580]&#x27;)</param>
        /// <returns>Task of SDTokenGetResponses</returns>
        System.Threading.Tasks.Task<SDTokenGetResponses> TokenGetGetAsync (string tokenIds);

        /// <summary>
        /// Get Token
        /// </summary>
        /// <remarks>
        /// Some of the details of this token are based upon the Template that it was created from (using token/mint)
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIds">Stringify Array of token ids (ex. &#x27;[3589, 3580]&#x27;)</param>
        /// <returns>Task of ApiResponse (SDTokenGetResponses)</returns>
        System.Threading.Tasks.Task<ApiResponse<SDTokenGetResponses>> TokenGetGetAsyncWithHttpInfo (string tokenIds);
        /// <summary>
        /// Mint Tokens
        /// </summary>
        /// <remarks>
        /// Mint tokens to a player.
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SDTokenMintBulkResponses</returns>
        System.Threading.Tasks.Task<SDTokenMintBulkResponses> TokenMintBulkPostAsync (SDTokenMintBulkRequest body);

        /// <summary>
        /// Mint Tokens
        /// </summary>
        /// <remarks>
        /// Mint tokens to a player.
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SDTokenMintBulkResponses)</returns>
        System.Threading.Tasks.Task<ApiResponse<SDTokenMintBulkResponses>> TokenMintBulkPostAsyncWithHttpInfo (SDTokenMintBulkRequest body);
        /// <summary>
        /// Mutate Token
        /// </summary>
        /// <remarks>
        /// Mutates a Property of a Token
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> TokenMutatePutAsync (SDTokenMutateRequest body);

        /// <summary>
        /// Mutate Token
        /// </summary>
        /// <remarks>
        /// Mutates a Property of a Token
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> TokenMutatePutAsyncWithHttpInfo (SDTokenMutateRequest body);
        /// <summary>
        /// Remove Token Property
        /// </summary>
        /// <remarks>
        /// Removes a Tokens Property from Your Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Token Id returned from token/create (ex. 5)</param>
        /// <param name="props">Stringify Array of token mutable property names ex: &#x27;[\&quot;exp\&quot;, \&quot;health\&quot;]&#x27; }</param>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> TokenPropsRemoveDeleteAsync (string tokenId, string props);

        /// <summary>
        /// Remove Token Property
        /// </summary>
        /// <remarks>
        /// Removes a Tokens Property from Your Game
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Token Id returned from token/create (ex. 5)</param>
        /// <param name="props">Stringify Array of token mutable property names ex: &#x27;[\&quot;exp\&quot;, \&quot;health\&quot;]&#x27; }</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> TokenPropsRemoveDeleteAsyncWithHttpInfo (string tokenId, string props);
        /// <summary>
        /// Transfer Tokens
        /// </summary>
        /// <remarks>
        /// Use this Endpoint to Facilitate Moving Tokens from one Player to Another
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Empty</returns>
        System.Threading.Tasks.Task<Empty> TokenTransferPostAsync (SDTokenTransferRequest body);

        /// <summary>
        /// Transfer Tokens
        /// </summary>
        /// <remarks>
        /// Use this Endpoint to Facilitate Moving Tokens from one Player to Another
        /// </remarks>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        System.Threading.Tasks.Task<ApiResponse<Empty>> TokenTransferPostAsyncWithHttpInfo (SDTokenTransferRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class TokenEndpointsApi : ITokenEndpointsApi
    {
        private Stardust.CoreSDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenEndpointsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TokenEndpointsApi(String basePath)
        {
            this.Configuration = new Stardust.CoreSDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Stardust.CoreSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenEndpointsApi"/> class
        /// </summary>
        /// <returns></returns>
        public TokenEndpointsApi()
        {
            this.Configuration = Stardust.CoreSDK.Client.Configuration.Default;

            ExceptionFactory = Stardust.CoreSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TokenEndpointsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TokenEndpointsApi(Stardust.CoreSDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Stardust.CoreSDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Stardust.CoreSDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Stardust.CoreSDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Stardust.CoreSDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Burn Token Burns token on-chain. Cannot be reversed.
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Empty</returns>
        public Empty TokenBurnPost (SDTokenBurnRequest body)
        {
             ApiResponse<Empty> localVarResponse = TokenBurnPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Burn Token Burns token on-chain. Cannot be reversed.
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > TokenBurnPostWithHttpInfo (SDTokenBurnRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TokenEndpointsApi->TokenBurnPost");

            var localVarPath = "./token/burn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TokenBurnPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Burn Token Burns token on-chain. Cannot be reversed.
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> TokenBurnPostAsync (SDTokenBurnRequest body)
        {
             ApiResponse<Empty> localVarResponse = await TokenBurnPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Burn Token Burns token on-chain. Cannot be reversed.
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> TokenBurnPostAsyncWithHttpInfo (SDTokenBurnRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TokenEndpointsApi->TokenBurnPost");

            var localVarPath = "./token/burn";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TokenBurnPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Get Token Some of the details of this token are based upon the Template that it was created from (using token/mint)
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIds">Stringify Array of token ids (ex. &#x27;[3589, 3580]&#x27;)</param>
        /// <returns>SDTokenGetResponses</returns>
        public SDTokenGetResponses TokenGetGet (string tokenIds)
        {
             ApiResponse<SDTokenGetResponses> localVarResponse = TokenGetGetWithHttpInfo(tokenIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Token Some of the details of this token are based upon the Template that it was created from (using token/mint)
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIds">Stringify Array of token ids (ex. &#x27;[3589, 3580]&#x27;)</param>
        /// <returns>ApiResponse of SDTokenGetResponses</returns>
        public ApiResponse< SDTokenGetResponses > TokenGetGetWithHttpInfo (string tokenIds)
        {
            // verify the required parameter 'tokenIds' is set
            if (tokenIds == null)
                throw new ApiException(400, "Missing required parameter 'tokenIds' when calling TokenEndpointsApi->TokenGetGet");

            var localVarPath = "./token/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tokenIds", tokenIds)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TokenGetGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDTokenGetResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDTokenGetResponses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDTokenGetResponses)));
        }

        /// <summary>
        /// Get Token Some of the details of this token are based upon the Template that it was created from (using token/mint)
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIds">Stringify Array of token ids (ex. &#x27;[3589, 3580]&#x27;)</param>
        /// <returns>Task of SDTokenGetResponses</returns>
        public async System.Threading.Tasks.Task<SDTokenGetResponses> TokenGetGetAsync (string tokenIds)
        {
             ApiResponse<SDTokenGetResponses> localVarResponse = await TokenGetGetAsyncWithHttpInfo(tokenIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Token Some of the details of this token are based upon the Template that it was created from (using token/mint)
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIds">Stringify Array of token ids (ex. &#x27;[3589, 3580]&#x27;)</param>
        /// <returns>Task of ApiResponse (SDTokenGetResponses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SDTokenGetResponses>> TokenGetGetAsyncWithHttpInfo (string tokenIds)
        {
            // verify the required parameter 'tokenIds' is set
            if (tokenIds == null)
                throw new ApiException(400, "Missing required parameter 'tokenIds' when calling TokenEndpointsApi->TokenGetGet");

            var localVarPath = "./token/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tokenIds", tokenIds)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TokenGetGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDTokenGetResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDTokenGetResponses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDTokenGetResponses)));
        }

        /// <summary>
        /// Mint Tokens Mint tokens to a player.
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SDTokenMintBulkResponses</returns>
        public SDTokenMintBulkResponses TokenMintBulkPost (SDTokenMintBulkRequest body)
        {
             ApiResponse<SDTokenMintBulkResponses> localVarResponse = TokenMintBulkPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mint Tokens Mint tokens to a player.
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SDTokenMintBulkResponses</returns>
        public ApiResponse< SDTokenMintBulkResponses > TokenMintBulkPostWithHttpInfo (SDTokenMintBulkRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TokenEndpointsApi->TokenMintBulkPost");

            var localVarPath = "./token/mint-bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TokenMintBulkPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDTokenMintBulkResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDTokenMintBulkResponses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDTokenMintBulkResponses)));
        }

        /// <summary>
        /// Mint Tokens Mint tokens to a player.
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SDTokenMintBulkResponses</returns>
        public async System.Threading.Tasks.Task<SDTokenMintBulkResponses> TokenMintBulkPostAsync (SDTokenMintBulkRequest body)
        {
             ApiResponse<SDTokenMintBulkResponses> localVarResponse = await TokenMintBulkPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mint Tokens Mint tokens to a player.
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SDTokenMintBulkResponses)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SDTokenMintBulkResponses>> TokenMintBulkPostAsyncWithHttpInfo (SDTokenMintBulkRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TokenEndpointsApi->TokenMintBulkPost");

            var localVarPath = "./token/mint-bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TokenMintBulkPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SDTokenMintBulkResponses>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SDTokenMintBulkResponses) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SDTokenMintBulkResponses)));
        }

        /// <summary>
        /// Mutate Token Mutates a Property of a Token
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Empty</returns>
        public Empty TokenMutatePut (SDTokenMutateRequest body)
        {
             ApiResponse<Empty> localVarResponse = TokenMutatePutWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mutate Token Mutates a Property of a Token
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > TokenMutatePutWithHttpInfo (SDTokenMutateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TokenEndpointsApi->TokenMutatePut");

            var localVarPath = "./token/mutate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TokenMutatePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Mutate Token Mutates a Property of a Token
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> TokenMutatePutAsync (SDTokenMutateRequest body)
        {
             ApiResponse<Empty> localVarResponse = await TokenMutatePutAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mutate Token Mutates a Property of a Token
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> TokenMutatePutAsyncWithHttpInfo (SDTokenMutateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TokenEndpointsApi->TokenMutatePut");

            var localVarPath = "./token/mutate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TokenMutatePut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Remove Token Property Removes a Tokens Property from Your Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Token Id returned from token/create (ex. 5)</param>
        /// <param name="props">Stringify Array of token mutable property names ex: &#x27;[\&quot;exp\&quot;, \&quot;health\&quot;]&#x27; }</param>
        /// <returns>Empty</returns>
        public Empty TokenPropsRemoveDelete (string tokenId, string props)
        {
             ApiResponse<Empty> localVarResponse = TokenPropsRemoveDeleteWithHttpInfo(tokenId, props);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Token Property Removes a Tokens Property from Your Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Token Id returned from token/create (ex. 5)</param>
        /// <param name="props">Stringify Array of token mutable property names ex: &#x27;[\&quot;exp\&quot;, \&quot;health\&quot;]&#x27; }</param>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > TokenPropsRemoveDeleteWithHttpInfo (string tokenId, string props)
        {
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling TokenEndpointsApi->TokenPropsRemoveDelete");
            // verify the required parameter 'props' is set
            if (props == null)
                throw new ApiException(400, "Missing required parameter 'props' when calling TokenEndpointsApi->TokenPropsRemoveDelete");

            var localVarPath = "./token/props-remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tokenId", tokenId)); // query parameter
            if (props != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "props", props)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TokenPropsRemoveDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Remove Token Property Removes a Tokens Property from Your Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Token Id returned from token/create (ex. 5)</param>
        /// <param name="props">Stringify Array of token mutable property names ex: &#x27;[\&quot;exp\&quot;, \&quot;health\&quot;]&#x27; }</param>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> TokenPropsRemoveDeleteAsync (string tokenId, string props)
        {
             ApiResponse<Empty> localVarResponse = await TokenPropsRemoveDeleteAsyncWithHttpInfo(tokenId, props);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove Token Property Removes a Tokens Property from Your Game
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">Token Id returned from token/create (ex. 5)</param>
        /// <param name="props">Stringify Array of token mutable property names ex: &#x27;[\&quot;exp\&quot;, \&quot;health\&quot;]&#x27; }</param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> TokenPropsRemoveDeleteAsyncWithHttpInfo (string tokenId, string props)
        {
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling TokenEndpointsApi->TokenPropsRemoveDelete");
            // verify the required parameter 'props' is set
            if (props == null)
                throw new ApiException(400, "Missing required parameter 'props' when calling TokenEndpointsApi->TokenPropsRemoveDelete");

            var localVarPath = "./token/props-remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (tokenId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tokenId", tokenId)); // query parameter
            if (props != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "props", props)); // query parameter
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TokenPropsRemoveDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Transfer Tokens Use this Endpoint to Facilitate Moving Tokens from one Player to Another
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Empty</returns>
        public Empty TokenTransferPost (SDTokenTransferRequest body)
        {
             ApiResponse<Empty> localVarResponse = TokenTransferPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer Tokens Use this Endpoint to Facilitate Moving Tokens from one Player to Another
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Empty</returns>
        public ApiResponse< Empty > TokenTransferPostWithHttpInfo (SDTokenTransferRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TokenEndpointsApi->TokenTransferPost");

            var localVarPath = "./token/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TokenTransferPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

        /// <summary>
        /// Transfer Tokens Use this Endpoint to Facilitate Moving Tokens from one Player to Another
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Empty</returns>
        public async System.Threading.Tasks.Task<Empty> TokenTransferPostAsync (SDTokenTransferRequest body)
        {
             ApiResponse<Empty> localVarResponse = await TokenTransferPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer Tokens Use this Endpoint to Facilitate Moving Tokens from one Player to Another
        /// </summary>
        /// <exception cref="Stardust.CoreSDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Empty)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Empty>> TokenTransferPostAsyncWithHttpInfo (SDTokenTransferRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TokenEndpointsApi->TokenTransferPost");

            var localVarPath = "./token/transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarHeaderParams["x-api-key"] = this.Configuration.GetApiKeyWithPrefix("x-api-key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TokenTransferPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Empty>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Empty) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Empty)));
        }

    }
}
